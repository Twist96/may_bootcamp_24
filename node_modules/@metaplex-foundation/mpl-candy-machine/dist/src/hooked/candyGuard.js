"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCandyGuardGpaBuilder = exports.safeFetchAllCandyGuard = exports.fetchAllCandyGuard = exports.safeFetchCandyGuard = exports.fetchCandyGuard = exports.deserializeCandyGuard = exports.getCandyGuardAccountDataSerializer = exports.findCandyGuardPda = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const candyGuard_1 = require("../generated/accounts/candyGuard");
Object.defineProperty(exports, "findCandyGuardPda", { enumerable: true, get: function () { return candyGuard_1.findCandyGuardPda; } });
const guards_1 = require("../guards");
const DISCRIMINATOR = [95, 25, 33, 117, 164, 206, 9, 250];
function getCandyGuardAccountDataSerializer(context, program) {
    program ?? (program = context.programs.get('mplCandyGuard'));
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['base', (0, serializers_1.publicKey)()],
        ['bump', (0, serializers_1.u8)()],
        ['authority', (0, serializers_1.publicKey)()],
        ['guards', (0, guards_1.getGuardSetSerializer)(context, program)],
        ['groups', (0, serializers_1.array)((0, guards_1.getGuardGroupSerializer)(context, program))],
    ], { description: 'CandyGuard' }), (value) => ({ ...value, discriminator: DISCRIMINATOR }));
}
exports.getCandyGuardAccountDataSerializer = getCandyGuardAccountDataSerializer;
function deserializeCandyGuard(context, rawAccount, program) {
    return (0, umi_1.deserializeAccount)(rawAccount, getCandyGuardAccountDataSerializer(context, program));
}
exports.deserializeCandyGuard = deserializeCandyGuard;
async function fetchCandyGuard(context, publicKey, options, program) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'CandyGuard');
    return deserializeCandyGuard(context, maybeAccount, program);
}
exports.fetchCandyGuard = fetchCandyGuard;
async function safeFetchCandyGuard(context, publicKey, options, program) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists
        ? deserializeCandyGuard(context, maybeAccount, program)
        : null;
}
exports.safeFetchCandyGuard = safeFetchCandyGuard;
async function fetchAllCandyGuard(context, publicKeys, options, program) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((publicKey) => (0, umi_1.publicKey)(publicKey, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'CandyGuard');
        return deserializeCandyGuard(context, maybeAccount, program);
    });
}
exports.fetchAllCandyGuard = fetchAllCandyGuard;
async function safeFetchAllCandyGuard(context, publicKeys, options, program) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((publicKey) => (0, umi_1.publicKey)(publicKey, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeCandyGuard(context, maybeAccount, program));
}
exports.safeFetchAllCandyGuard = safeFetchAllCandyGuard;
function getCandyGuardGpaBuilder(context, program) {
    const programId = context.programs.getPublicKey('mplCandyGuard', 'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        base: [8, (0, serializers_1.publicKey)()],
        bump: [40, (0, serializers_1.u8)()],
        authority: [41, (0, serializers_1.publicKey)()],
    })
        .deserializeUsing((account) => deserializeCandyGuard(context, account, program))
        .whereField('discriminator', DISCRIMINATOR);
}
exports.getCandyGuardGpaBuilder = getCandyGuardGpaBuilder;
//# sourceMappingURL=candyGuard.js.map