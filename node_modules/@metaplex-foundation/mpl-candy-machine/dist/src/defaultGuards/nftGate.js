"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nftGateGuardManifest = void 0;
const mpl_toolbox_1 = require("@metaplex-foundation/mpl-toolbox");
const mpl_token_metadata_1 = require("@metaplex-foundation/mpl-token-metadata");
const generated_1 = require("../generated");
const guards_1 = require("../guards");
/**
 * The nftGate guard restricts minting to holders
 * of a specified NFT collection.
 *
 * This means the mint address of an NFT from this
 * collection must be passed when minting.
 */
exports.nftGateGuardManifest = {
    name: 'nftGate',
    serializer: generated_1.getNftGateSerializer,
    mintParser: (context, mintContext, args) => {
        const tokenAccount = args.tokenAccount ??
            (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
                mint: args.mint,
                owner: mintContext.minter.publicKey,
            })[0];
        const [tokenMetadata] = (0, mpl_token_metadata_1.findMetadataPda)(context, { mint: args.mint });
        return {
            data: new Uint8Array(),
            remainingAccounts: [
                { publicKey: tokenAccount, isWritable: false },
                { publicKey: tokenMetadata, isWritable: false },
            ],
        };
    },
    routeParser: guards_1.noopParser,
};
//# sourceMappingURL=nftGate.js.map