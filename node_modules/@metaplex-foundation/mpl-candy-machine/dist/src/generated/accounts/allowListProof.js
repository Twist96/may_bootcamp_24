"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeFetchAllowListProofFromSeeds = exports.fetchAllowListProofFromSeeds = exports.findAllowListProofPda = exports.getAllowListProofSize = exports.getAllowListProofGpaBuilder = exports.safeFetchAllAllowListProof = exports.fetchAllAllowListProof = exports.safeFetchAllowListProof = exports.fetchAllowListProof = exports.deserializeAllowListProof = exports.getAllowListProofAccountDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
function getAllowListProofAccountDataSerializer() {
    return (0, serializers_1.struct)([['timestamp', (0, serializers_1.i64)()]], {
        description: 'AllowListProofAccountData',
    });
}
exports.getAllowListProofAccountDataSerializer = getAllowListProofAccountDataSerializer;
function deserializeAllowListProof(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getAllowListProofAccountDataSerializer());
}
exports.deserializeAllowListProof = deserializeAllowListProof;
async function fetchAllowListProof(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'AllowListProof');
    return deserializeAllowListProof(maybeAccount);
}
exports.fetchAllowListProof = fetchAllowListProof;
async function safeFetchAllowListProof(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeAllowListProof(maybeAccount) : null;
}
exports.safeFetchAllowListProof = safeFetchAllowListProof;
async function fetchAllAllowListProof(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'AllowListProof');
        return deserializeAllowListProof(maybeAccount);
    });
}
exports.fetchAllAllowListProof = fetchAllAllowListProof;
async function safeFetchAllAllowListProof(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeAllowListProof(maybeAccount));
}
exports.safeFetchAllAllowListProof = safeFetchAllAllowListProof;
function getAllowListProofGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplCandyGuard', 'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({ timestamp: [0, (0, serializers_1.i64)()] })
        .deserializeUsing((account) => deserializeAllowListProof(account))
        .whereSize(8);
}
exports.getAllowListProofGpaBuilder = getAllowListProofGpaBuilder;
function getAllowListProofSize() {
    return 8;
}
exports.getAllowListProofSize = getAllowListProofSize;
function findAllowListProofPda(context, seeds) {
    const programId = context.programs.getPublicKey('mplCandyGuard', 'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g');
    return context.eddsa.findPda(programId, [
        (0, serializers_1.string)({ size: 'variable' }).serialize('allow_list'),
        (0, serializers_1.bytes)({ size: 32 }).serialize(seeds.merkleRoot),
        (0, serializers_1.publicKey)().serialize(seeds.user),
        (0, serializers_1.publicKey)().serialize(seeds.candyGuard),
        (0, serializers_1.publicKey)().serialize(seeds.candyMachine),
    ]);
}
exports.findAllowListProofPda = findAllowListProofPda;
async function fetchAllowListProofFromSeeds(context, seeds, options) {
    return fetchAllowListProof(context, findAllowListProofPda(context, seeds), options);
}
exports.fetchAllowListProofFromSeeds = fetchAllowListProofFromSeeds;
async function safeFetchAllowListProofFromSeeds(context, seeds, options) {
    return safeFetchAllowListProof(context, findAllowListProofPda(context, seeds), options);
}
exports.safeFetchAllowListProofFromSeeds = safeFetchAllowListProofFromSeeds;
//# sourceMappingURL=allowListProof.js.map