"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCandyMachineGpaBuilder = exports.safeFetchAllCandyMachine = exports.fetchAllCandyMachine = exports.safeFetchCandyMachine = exports.fetchCandyMachine = exports.deserializeCandyMachine = void 0;
const mpl_token_metadata_1 = require("@metaplex-foundation/mpl-token-metadata");
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const hooked_1 = require("../../hooked");
const types_1 = require("../types");
function deserializeCandyMachine(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, (0, hooked_1.getCandyMachineAccountDataSerializer)());
}
exports.deserializeCandyMachine = deserializeCandyMachine;
async function fetchCandyMachine(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'CandyMachine');
    return deserializeCandyMachine(maybeAccount);
}
exports.fetchCandyMachine = fetchCandyMachine;
async function safeFetchCandyMachine(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeCandyMachine(maybeAccount) : null;
}
exports.safeFetchCandyMachine = safeFetchCandyMachine;
async function fetchAllCandyMachine(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'CandyMachine');
        return deserializeCandyMachine(maybeAccount);
    });
}
exports.fetchAllCandyMachine = fetchAllCandyMachine;
async function safeFetchAllCandyMachine(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeCandyMachine(maybeAccount));
}
exports.safeFetchAllCandyMachine = safeFetchAllCandyMachine;
function getCandyMachineGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplCandyMachineCore', 'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        version: [8, (0, types_1.getAccountVersionSerializer)()],
        tokenStandard: [9, (0, mpl_token_metadata_1.getTokenStandardSerializer)()],
        features: [null, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 6 })],
        authority: [null, (0, serializers_1.publicKey)()],
        mintAuthority: [null, (0, serializers_1.publicKey)()],
        collectionMint: [null, (0, serializers_1.publicKey)()],
        itemsRedeemed: [null, (0, serializers_1.u64)()],
        data: [null, (0, types_1.getCandyMachineDataSerializer)()],
    })
        .deserializeUsing((account) => deserializeCandyMachine(account))
        .whereField('discriminator', [51, 173, 177, 113, 25, 241, 109, 189]);
}
exports.getCandyMachineGpaBuilder = getCandyMachineGpaBuilder;
//# sourceMappingURL=candyMachine.js.map