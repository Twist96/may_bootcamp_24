/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Program, ProgramError } from '@metaplex-foundation/umi';
/** IncorrectOwner: Account does not have correct owner */
export declare class CmIncorrectOwnerError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** Uninitialized: Account is not initialized */
export declare class CmUninitializedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MintMismatch: Mint Mismatch */
export declare class CmMintMismatchError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** IndexGreaterThanLength: Index greater than length */
export declare class CmIndexGreaterThanLengthError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NumericalOverflowError: Numerical overflow error */
export declare class CmNumericalOverflowErrorError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** TooManyCreators: Can only provide up to 4 creators to candy machine (because candy machine is one) */
export declare class CmTooManyCreatorsError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** CandyMachineEmpty: Candy machine is empty */
export declare class CmCandyMachineEmptyError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** HiddenSettingsDoNotHaveConfigLines: Candy machines using hidden uris do not have config lines, they have a single hash representing hashed order */
export declare class CmHiddenSettingsDoNotHaveConfigLinesError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** CannotChangeNumberOfLines: Cannot change number of lines unless is a hidden config */
export declare class CmCannotChangeNumberOfLinesError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** CannotSwitchToHiddenSettings: Cannot switch to hidden settings after items available is greater than 0 */
export declare class CmCannotSwitchToHiddenSettingsError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** IncorrectCollectionAuthority: Incorrect collection NFT authority */
export declare class CmIncorrectCollectionAuthorityError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MetadataAccountMustBeEmpty: The metadata account has data in it, and this must be empty to mint a new NFT */
export declare class CmMetadataAccountMustBeEmptyError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NoChangingCollectionDuringMint: Can't change collection settings after items have begun to be minted */
export declare class CmNoChangingCollectionDuringMintError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** ExceededLengthError: Value longer than expected maximum value */
export declare class CmExceededLengthErrorError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingConfigLinesSettings: Missing config lines settings */
export declare class CmMissingConfigLinesSettingsError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** CannotIncreaseLength: Cannot increase the length in config lines settings */
export declare class CmCannotIncreaseLengthError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** CannotSwitchFromHiddenSettings: Cannot switch from hidden settings */
export declare class CmCannotSwitchFromHiddenSettingsError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** CannotChangeSequentialIndexGeneration: Cannot change sequential index generation after items have begun to be minted */
export declare class CmCannotChangeSequentialIndexGenerationError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** CollectionKeyMismatch: Collection public key mismatch */
export declare class CmCollectionKeyMismatchError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** CouldNotRetrieveConfigLineData: Could not retrive config line data */
export declare class CmCouldNotRetrieveConfigLineDataError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NotFullyLoaded: Not all config lines were added to the candy machine */
export declare class CmNotFullyLoadedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InstructionBuilderFailed: Instruction could not be created */
export declare class CmInstructionBuilderFailedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingCollectionAuthorityRecord: Missing collection authority record */
export declare class CmMissingCollectionAuthorityRecordError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingMetadataDelegateRecord: Missing metadata delegate record */
export declare class CmMissingMetadataDelegateRecordError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidTokenStandard: Invalid token standard */
export declare class CmInvalidTokenStandardError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingTokenAccount: Missing token account */
export declare class CmMissingTokenAccountError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingTokenRecord: Missing token record */
export declare class CmMissingTokenRecordError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingInstructionsSysvar: Missing instructions sysvar account */
export declare class CmMissingInstructionsSysvarError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingSplAtaProgram: Missing SPL ATA program */
export declare class CmMissingSplAtaProgramError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidAccountVersion: Invalid account version */
export declare class CmInvalidAccountVersionError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export declare function getMplCandyMachineCoreErrorFromCode(code: number, program: Program, cause?: Error): ProgramError | null;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export declare function getMplCandyMachineCoreErrorFromName(name: string, program: Program, cause?: Error): ProgramError | null;
