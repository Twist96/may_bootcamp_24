"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tokenPaymentGuardManifest = void 0;
const mpl_toolbox_1 = require("@metaplex-foundation/mpl-toolbox");
const generated_1 = require("../generated");
const guards_1 = require("../guards");
/**
 * The tokenPayment guard allows minting by charging the
 * payer a specific amount of tokens from a certain mint acount.
 * The tokens will be transfered to a predefined destination.
 *
 * This guard alone does not limit how many times a holder
 * can mint. A holder can mint as many times as they have
 * the required amount of tokens to pay with.
 */
exports.tokenPaymentGuardManifest = {
    name: 'tokenPayment',
    serializer: generated_1.getTokenPaymentSerializer,
    mintParser: (context, mintContext, args) => {
        const [sourceAta] = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
            mint: args.mint,
            owner: mintContext.minter.publicKey,
        });
        return {
            data: new Uint8Array(),
            remainingAccounts: [
                { publicKey: sourceAta, isWritable: true },
                { publicKey: args.destinationAta, isWritable: true },
            ],
        };
    },
    routeParser: guards_1.noopParser,
};
//# sourceMappingURL=tokenPayment.js.map