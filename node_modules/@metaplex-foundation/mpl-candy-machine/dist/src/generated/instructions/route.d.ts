/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Option, OptionOrNullable, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { GuardType, GuardTypeArgs } from '../types';
export declare type RouteInstructionAccounts = {
    candyGuard?: PublicKey | Pda;
    candyMachine: PublicKey | Pda;
    payer?: Signer;
};
export declare type RouteInstructionData = {
    discriminator: Array<number>;
    /** The target guard type. */
    guard: GuardType;
    /** Arguments for the guard instruction. */
    data: Uint8Array;
    group: Option<string>;
};
export declare type RouteInstructionDataArgs = {
    /** The target guard type. */
    guard: GuardTypeArgs;
    /** Arguments for the guard instruction. */
    data: Uint8Array;
    group: OptionOrNullable<string>;
};
export declare function getRouteInstructionDataSerializer(): Serializer<RouteInstructionDataArgs, RouteInstructionData>;
export declare type RouteInstructionArgs = RouteInstructionDataArgs;
export declare function route(context: Pick<Context, 'eddsa' | 'payer' | 'programs'>, input: RouteInstructionAccounts & RouteInstructionArgs): TransactionBuilder;
