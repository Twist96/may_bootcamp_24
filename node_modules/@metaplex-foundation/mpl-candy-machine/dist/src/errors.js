"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MaximumOfFiveAdditionalProgramsError = exports.MintOwnerMustBeMintPayerError = exports.UnrecognizePathForRouteInstructionError = exports.GuardGroupLabelTooLongError = exports.GuardNotEnabledError = exports.CandyGuardRequiredOnCandyMachineError = exports.GuardRouteNotSupportedError = exports.GuardMintSettingsMissingError = exports.SelectedGuardGroupDoesNotExistError = exports.GuardGroupRequiredError = exports.UnregisteredCandyGuardError = exports.VariableSizeGuardError = exports.CandyMachineError = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const constants_1 = require("./constants");
class CandyMachineError extends umi_1.UmiError {
    constructor(message, cause) {
        super(message, 'plugin', 'Candy Machine', cause);
        this.name = 'CandyMachineError';
    }
}
exports.CandyMachineError = CandyMachineError;
class VariableSizeGuardError extends CandyMachineError {
    constructor(name) {
        const message = `Trying add a guard [${name}] with a variable-size serializer. ` +
            `The Candy Guard program only works with fixed-size guards. ` +
            'Please use the `fixSerializer` helper method to make it a fixed-size guard.';
        super(message);
        this.name = 'VariableSizeGuardError';
    }
}
exports.VariableSizeGuardError = VariableSizeGuardError;
class UnregisteredCandyGuardError extends CandyMachineError {
    constructor(name) {
        const message = `Trying to access a custom guard named [${name}] that ` +
            `guard was not registered on the guard repository. ` +
            'Register your custom guard by calling the `umi.guards.add()` method.';
        super(message);
        this.name = 'UnregisteredCandyGuardError';
    }
}
exports.UnregisteredCandyGuardError = UnregisteredCandyGuardError;
class GuardGroupRequiredError extends CandyMachineError {
    constructor(availableGroups) {
        const message = 'The provided Candy Machine defines groups of guards but no' +
            'group label was provided to identity which group we should select. ' +
            'Please provide the label of the group you wish to select from via the `group` parameter. ' +
            `The available groups are [${availableGroups.join(', ')}]`;
        super(message);
        this.name = 'GuardGroupRequiredError';
    }
}
exports.GuardGroupRequiredError = GuardGroupRequiredError;
class SelectedGuardGroupDoesNotExistError extends CandyMachineError {
    constructor(selectedGroup, availableGroups) {
        const message = `You're trying to select the guard group [${selectedGroup}] from a ` +
            `Candy Machine but this group does not exists on this Candy Machine. ${availableGroups.length > 0
                ? 'Please provide the label of a group that exists on the Candy Machine. ' +
                    `The available groups are [${availableGroups.join(', ')}]`
                : 'There are no guard groups defined on the Candy Machine. ' +
                    'Please set the `group` parameter to `null` or remove it altogether.'}`;
        super(message);
        this.name = 'SelectedGuardGroupDoesNotExistError';
    }
}
exports.SelectedGuardGroupDoesNotExistError = SelectedGuardGroupDoesNotExistError;
class GuardMintSettingsMissingError extends CandyMachineError {
    constructor(guardName) {
        const message = `The Candy Machine you are trying to mint from has the [${guardName}] guard enabled. ` +
            'This guard requires you to provide some additional settings when minting which you did not provide. ' +
            `Please provide some minting settings for the [${guardName}] guard ` +
            `via the \`guards\` parameter like so: \`guards.${guardName} = {...}\`.`;
        super(message);
        this.name = 'GuardMintSettingsMissingError';
    }
}
exports.GuardMintSettingsMissingError = GuardMintSettingsMissingError;
class GuardRouteNotSupportedError extends CandyMachineError {
    constructor(guardName) {
        const message = `You are trying to call the route instruction of the [${guardName}] guard ` +
            'but this guard does not support this feature or did not register it on the SDK. ' +
            'Please select a guard that support the route instruction feature. ' +
            'If you are using a custom guard, make sure you registered the route instruction ' +
            'feature by implementing the `routeSettingsParser` method on the guard manifest.';
        super(message);
        this.name = 'GuardRouteNotSupportedError';
    }
}
exports.GuardRouteNotSupportedError = GuardRouteNotSupportedError;
class CandyGuardRequiredOnCandyMachineError extends CandyMachineError {
    constructor() {
        const message = `The provided Candy Machine does not have a Candy Guard associated with ` +
            `it yet, it is required for the operation you are trying to execute. ` +
            'Please provide a Candy Machine with an associated Candy Guard account.';
        super(message);
        this.name = 'CandyGuardRequiredOnCandyMachineError';
    }
}
exports.CandyGuardRequiredOnCandyMachineError = CandyGuardRequiredOnCandyMachineError;
class GuardNotEnabledError extends CandyMachineError {
    constructor(guard, group) {
        const message = `${group
            ? `The guard [${guard}] is not enabled on the group [${group}] of the Candy Machine.`
            : `The guard [${guard}] is not enabled on the Candy Machine. `}Please provide a different guard or select a different group ` +
            `such that the provided guard is enabled on the selected group.`;
        super(message);
        this.name = 'GuardNotEnabledError';
    }
}
exports.GuardNotEnabledError = GuardNotEnabledError;
class GuardGroupLabelTooLongError extends CandyMachineError {
    constructor(label) {
        const message = `The provided group label [${label}] is too long. ` +
            `Group labels cannot be longer than ${constants_1.CANDY_GUARD_LABEL_SIZE} characters. ` +
            'Please provide a shorter group label.';
        super(message);
        this.name = 'GuardGroupLabelTooLongError';
    }
}
exports.GuardGroupLabelTooLongError = GuardGroupLabelTooLongError;
class UnrecognizePathForRouteInstructionError extends CandyMachineError {
    constructor(guard, path) {
        const message = `The provided path [${path}] does not exist on the route instruction of the [${guard}] guard. ` +
            'Please provide a recognized path.';
        super(message);
        this.name = 'UnrecognizePathForRouteInstructionError';
    }
}
exports.UnrecognizePathForRouteInstructionError = UnrecognizePathForRouteInstructionError;
class MintOwnerMustBeMintPayerError extends CandyMachineError {
    constructor(guard) {
        const message = `The payer must be the owner when using the [${guard}] guard. ` +
            'Please remove the `owner` attribute from the mint input so they can be the same.';
        super(message);
        this.name = 'MintOwnerMustBeMintPayerError';
    }
}
exports.MintOwnerMustBeMintPayerError = MintOwnerMustBeMintPayerError;
class MaximumOfFiveAdditionalProgramsError extends CandyMachineError {
    constructor() {
        const message = `There is a maximum of five additional programs when using the [programGate] guard. ` +
            'Please reduce the number of additional programs to <= 5.';
        super(message);
        this.name = 'MaximumOfFiveAdditionalProgramsError';
    }
}
exports.MaximumOfFiveAdditionalProgramsError = MaximumOfFiveAdditionalProgramsError;
//# sourceMappingURL=errors.js.map