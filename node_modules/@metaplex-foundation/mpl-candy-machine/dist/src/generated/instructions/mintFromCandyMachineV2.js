"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mintFromCandyMachineV2 = exports.getMintFromCandyMachineV2InstructionDataSerializer = void 0;
const mpl_token_metadata_1 = require("@metaplex-foundation/mpl-token-metadata");
const mpl_toolbox_1 = require("@metaplex-foundation/mpl-toolbox");
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const hooked_1 = require("../../hooked");
const shared_1 = require("../shared");
function getMintFromCandyMachineV2InstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })]], { description: 'MintFromCandyMachineV2InstructionData' }), (value) => ({
        ...value,
        discriminator: [120, 121, 23, 146, 173, 110, 199, 205],
    }));
}
exports.getMintFromCandyMachineV2InstructionDataSerializer = getMintFromCandyMachineV2InstructionDataSerializer;
// Instruction.
function mintFromCandyMachineV2(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplCandyMachineCore', 'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR');
    // Accounts.
    const resolvedAccounts = {
        candyMachine: {
            index: 0,
            isWritable: true,
            value: input.candyMachine ?? null,
        },
        authorityPda: {
            index: 1,
            isWritable: true,
            value: input.authorityPda ?? null,
        },
        mintAuthority: {
            index: 2,
            isWritable: false,
            value: input.mintAuthority ?? null,
        },
        payer: { index: 3, isWritable: true, value: input.payer ?? null },
        nftOwner: { index: 4, isWritable: false, value: input.nftOwner ?? null },
        nftMint: { index: 5, isWritable: true, value: input.nftMint ?? null },
        nftMintAuthority: {
            index: 6,
            isWritable: false,
            value: input.nftMintAuthority ?? null,
        },
        nftMetadata: {
            index: 7,
            isWritable: true,
            value: input.nftMetadata ?? null,
        },
        nftMasterEdition: {
            index: 8,
            isWritable: true,
            value: input.nftMasterEdition ?? null,
        },
        token: { index: 9, isWritable: true, value: input.token ?? null },
        tokenRecord: {
            index: 10,
            isWritable: true,
            value: input.tokenRecord ?? null,
        },
        collectionDelegateRecord: {
            index: 11,
            isWritable: false,
            value: input.collectionDelegateRecord ?? null,
        },
        collectionMint: {
            index: 12,
            isWritable: false,
            value: input.collectionMint ?? null,
        },
        collectionMetadata: {
            index: 13,
            isWritable: true,
            value: input.collectionMetadata ?? null,
        },
        collectionMasterEdition: {
            index: 14,
            isWritable: false,
            value: input.collectionMasterEdition ?? null,
        },
        collectionUpdateAuthority: {
            index: 15,
            isWritable: false,
            value: input.collectionUpdateAuthority ?? null,
        },
        tokenMetadataProgram: {
            index: 16,
            isWritable: false,
            value: input.tokenMetadataProgram ?? null,
        },
        splTokenProgram: {
            index: 17,
            isWritable: false,
            value: input.splTokenProgram ?? null,
        },
        splAtaProgram: {
            index: 18,
            isWritable: false,
            value: input.splAtaProgram ?? null,
        },
        systemProgram: {
            index: 19,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
        sysvarInstructions: {
            index: 20,
            isWritable: false,
            value: input.sysvarInstructions ?? null,
        },
        recentSlothashes: {
            index: 21,
            isWritable: false,
            value: input.recentSlothashes ?? null,
        },
        authorizationRulesProgram: {
            index: 22,
            isWritable: false,
            value: input.authorizationRulesProgram ?? null,
        },
        authorizationRules: {
            index: 23,
            isWritable: false,
            value: input.authorizationRules ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.authorityPda.value) {
        resolvedAccounts.authorityPda.value = (0, hooked_1.findCandyMachineAuthorityPda)(context, { candyMachine: (0, shared_1.expectPublicKey)(resolvedAccounts.candyMachine.value) });
    }
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    if (!resolvedAccounts.nftMintAuthority.value) {
        resolvedAccounts.nftMintAuthority.value = context.identity;
    }
    if (!resolvedAccounts.nftMetadata.value) {
        resolvedAccounts.nftMetadata.value = (0, mpl_token_metadata_1.findMetadataPda)(context, {
            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.nftMint.value),
        });
    }
    if (!resolvedAccounts.nftMasterEdition.value) {
        resolvedAccounts.nftMasterEdition.value = (0, mpl_token_metadata_1.findMasterEditionPda)(context, {
            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.nftMint.value),
        });
    }
    if (!resolvedAccounts.token.value) {
        resolvedAccounts.token.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.nftMint.value),
            owner: (0, shared_1.expectPublicKey)(resolvedAccounts.nftOwner.value),
        });
    }
    if (!resolvedAccounts.collectionDelegateRecord.value) {
        resolvedAccounts.collectionDelegateRecord.value =
            (0, mpl_token_metadata_1.findMetadataDelegateRecordPda)(context, {
                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.collectionMint.value),
                delegateRole: mpl_token_metadata_1.MetadataDelegateRole.Collection,
                updateAuthority: (0, shared_1.expectPublicKey)(resolvedAccounts.collectionUpdateAuthority.value),
                delegate: (0, shared_1.expectPublicKey)(resolvedAccounts.authorityPda.value),
            });
    }
    if (!resolvedAccounts.collectionMetadata.value) {
        resolvedAccounts.collectionMetadata.value = (0, mpl_token_metadata_1.findMetadataPda)(context, {
            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.collectionMint.value),
        });
    }
    if (!resolvedAccounts.collectionMasterEdition.value) {
        resolvedAccounts.collectionMasterEdition.value = (0, mpl_token_metadata_1.findMasterEditionPda)(context, { mint: (0, shared_1.expectPublicKey)(resolvedAccounts.collectionMint.value) });
    }
    if (!resolvedAccounts.tokenMetadataProgram.value) {
        resolvedAccounts.tokenMetadataProgram.value = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
        resolvedAccounts.tokenMetadataProgram.isWritable = false;
    }
    if (!resolvedAccounts.splTokenProgram.value) {
        resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
        resolvedAccounts.splTokenProgram.isWritable = false;
    }
    if (!resolvedAccounts.splAtaProgram.value) {
        resolvedAccounts.splAtaProgram.value = context.programs.getPublicKey('splAssociatedToken', 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
        resolvedAccounts.splAtaProgram.isWritable = false;
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    if (!resolvedAccounts.sysvarInstructions.value) {
        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
    }
    if (!resolvedAccounts.recentSlothashes.value) {
        resolvedAccounts.recentSlothashes.value = (0, umi_1.publicKey)('SysvarS1otHashes111111111111111111111111111');
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getMintFromCandyMachineV2InstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.mintFromCandyMachineV2 = mintFromCandyMachineV2;
//# sourceMappingURL=mintFromCandyMachineV2.js.map