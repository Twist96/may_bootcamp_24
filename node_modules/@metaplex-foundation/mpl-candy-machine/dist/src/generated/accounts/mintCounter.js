"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeFetchMintCounterFromSeeds = exports.fetchMintCounterFromSeeds = exports.findMintCounterPda = exports.getMintCounterSize = exports.getMintCounterGpaBuilder = exports.safeFetchAllMintCounter = exports.fetchAllMintCounter = exports.safeFetchMintCounter = exports.fetchMintCounter = exports.deserializeMintCounter = exports.getMintCounterAccountDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
function getMintCounterAccountDataSerializer() {
    return (0, serializers_1.struct)([['count', (0, serializers_1.u16)()]], {
        description: 'MintCounterAccountData',
    });
}
exports.getMintCounterAccountDataSerializer = getMintCounterAccountDataSerializer;
function deserializeMintCounter(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getMintCounterAccountDataSerializer());
}
exports.deserializeMintCounter = deserializeMintCounter;
async function fetchMintCounter(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'MintCounter');
    return deserializeMintCounter(maybeAccount);
}
exports.fetchMintCounter = fetchMintCounter;
async function safeFetchMintCounter(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeMintCounter(maybeAccount) : null;
}
exports.safeFetchMintCounter = safeFetchMintCounter;
async function fetchAllMintCounter(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'MintCounter');
        return deserializeMintCounter(maybeAccount);
    });
}
exports.fetchAllMintCounter = fetchAllMintCounter;
async function safeFetchAllMintCounter(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeMintCounter(maybeAccount));
}
exports.safeFetchAllMintCounter = safeFetchAllMintCounter;
function getMintCounterGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplCandyGuard', 'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({ count: [0, (0, serializers_1.u16)()] })
        .deserializeUsing((account) => deserializeMintCounter(account))
        .whereSize(2);
}
exports.getMintCounterGpaBuilder = getMintCounterGpaBuilder;
function getMintCounterSize() {
    return 2;
}
exports.getMintCounterSize = getMintCounterSize;
function findMintCounterPda(context, seeds) {
    const programId = context.programs.getPublicKey('mplCandyGuard', 'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g');
    return context.eddsa.findPda(programId, [
        (0, serializers_1.string)({ size: 'variable' }).serialize('mint_limit'),
        (0, serializers_1.u8)().serialize(seeds.id),
        (0, serializers_1.publicKey)().serialize(seeds.user),
        (0, serializers_1.publicKey)().serialize(seeds.candyGuard),
        (0, serializers_1.publicKey)().serialize(seeds.candyMachine),
    ]);
}
exports.findMintCounterPda = findMintCounterPda;
async function fetchMintCounterFromSeeds(context, seeds, options) {
    return fetchMintCounter(context, findMintCounterPda(context, seeds), options);
}
exports.fetchMintCounterFromSeeds = fetchMintCounterFromSeeds;
async function safeFetchMintCounterFromSeeds(context, seeds, options) {
    return safeFetchMintCounter(context, findMintCounterPda(context, seeds), options);
}
exports.safeFetchMintCounterFromSeeds = safeFetchMintCounterFromSeeds;
//# sourceMappingURL=mintCounter.js.map