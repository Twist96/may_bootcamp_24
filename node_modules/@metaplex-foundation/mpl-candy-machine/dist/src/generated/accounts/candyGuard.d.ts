/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export declare type CandyGuard = Account<CandyGuardAccountData>;
export declare type CandyGuardAccountData = {
    discriminator: Array<number>;
    base: PublicKey;
    bump: number;
    authority: PublicKey;
};
export declare type CandyGuardAccountDataArgs = {
    base: PublicKey;
    bump: number;
    authority: PublicKey;
};
export declare function getCandyGuardAccountDataSerializer(): Serializer<CandyGuardAccountDataArgs, CandyGuardAccountData>;
export declare function deserializeCandyGuard(rawAccount: RpcAccount): CandyGuard;
export declare function fetchCandyGuard(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<CandyGuard>;
export declare function safeFetchCandyGuard(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<CandyGuard | null>;
export declare function fetchAllCandyGuard(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<CandyGuard[]>;
export declare function safeFetchAllCandyGuard(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<CandyGuard[]>;
export declare function getCandyGuardGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<CandyGuard, {
    discriminator: Array<number>;
    base: PublicKey;
    bump: number;
    authority: PublicKey;
}>;
export declare function getCandyGuardSize(): number;
export declare function findCandyGuardPda(context: Pick<Context, 'eddsa' | 'programs'>, seeds: {
    /** The base address which the Candy Guard PDA derives from */
    base: PublicKey;
}): Pda;
export declare function fetchCandyGuardFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findCandyGuardPda>[1], options?: RpcGetAccountOptions): Promise<CandyGuard>;
export declare function safeFetchCandyGuardFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findCandyGuardPda>[1], options?: RpcGetAccountOptions): Promise<CandyGuard | null>;
