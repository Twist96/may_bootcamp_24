"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeFetchAllocationTrackerFromSeeds = exports.fetchAllocationTrackerFromSeeds = exports.findAllocationTrackerPda = exports.getAllocationTrackerSize = exports.getAllocationTrackerGpaBuilder = exports.safeFetchAllAllocationTracker = exports.fetchAllAllocationTracker = exports.safeFetchAllocationTracker = exports.fetchAllocationTracker = exports.deserializeAllocationTracker = exports.getAllocationTrackerAccountDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
function getAllocationTrackerAccountDataSerializer() {
    return (0, serializers_1.struct)([['count', (0, serializers_1.u32)()]], {
        description: 'AllocationTrackerAccountData',
    });
}
exports.getAllocationTrackerAccountDataSerializer = getAllocationTrackerAccountDataSerializer;
function deserializeAllocationTracker(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getAllocationTrackerAccountDataSerializer());
}
exports.deserializeAllocationTracker = deserializeAllocationTracker;
async function fetchAllocationTracker(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'AllocationTracker');
    return deserializeAllocationTracker(maybeAccount);
}
exports.fetchAllocationTracker = fetchAllocationTracker;
async function safeFetchAllocationTracker(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists
        ? deserializeAllocationTracker(maybeAccount)
        : null;
}
exports.safeFetchAllocationTracker = safeFetchAllocationTracker;
async function fetchAllAllocationTracker(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'AllocationTracker');
        return deserializeAllocationTracker(maybeAccount);
    });
}
exports.fetchAllAllocationTracker = fetchAllAllocationTracker;
async function safeFetchAllAllocationTracker(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeAllocationTracker(maybeAccount));
}
exports.safeFetchAllAllocationTracker = safeFetchAllAllocationTracker;
function getAllocationTrackerGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplCandyGuard', 'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({ count: [0, (0, serializers_1.u32)()] })
        .deserializeUsing((account) => deserializeAllocationTracker(account))
        .whereSize(4);
}
exports.getAllocationTrackerGpaBuilder = getAllocationTrackerGpaBuilder;
function getAllocationTrackerSize() {
    return 4;
}
exports.getAllocationTrackerSize = getAllocationTrackerSize;
function findAllocationTrackerPda(context, seeds) {
    const programId = context.programs.getPublicKey('mplCandyGuard', 'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g');
    return context.eddsa.findPda(programId, [
        (0, serializers_1.string)({ size: 'variable' }).serialize('allocation'),
        (0, serializers_1.u8)().serialize(seeds.id),
        (0, serializers_1.publicKey)().serialize(seeds.candyGuard),
        (0, serializers_1.publicKey)().serialize(seeds.candyMachine),
    ]);
}
exports.findAllocationTrackerPda = findAllocationTrackerPda;
async function fetchAllocationTrackerFromSeeds(context, seeds, options) {
    return fetchAllocationTracker(context, findAllocationTrackerPda(context, seeds), options);
}
exports.fetchAllocationTrackerFromSeeds = fetchAllocationTrackerFromSeeds;
async function safeFetchAllocationTrackerFromSeeds(context, seeds, options) {
    return safeFetchAllocationTracker(context, findAllocationTrackerPda(context, seeds), options);
}
exports.safeFetchAllocationTrackerFromSeeds = safeFetchAllocationTrackerFromSeeds;
//# sourceMappingURL=allocationTracker.js.map