import { Option, OptionOrNullable } from '@metaplex-foundation/umi';
import { AddressGate, AddressGateArgs, Allocation, AllocationArgs, AllowList, AllowListArgs, BotTax, BotTaxArgs, EndDate, EndDateArgs, FreezeSolPayment, FreezeSolPaymentArgs, FreezeTokenPayment, FreezeTokenPaymentArgs, Gatekeeper, GatekeeperArgs, MintLimit, MintLimitArgs, NftBurn, NftBurnArgs, NftGate, NftGateArgs, NftPayment, NftPaymentArgs, ProgramGate, ProgramGateArgs, RedeemedAmount, RedeemedAmountArgs, SolPayment, SolPaymentArgs, StartDate, StartDateArgs, ThirdPartySigner, ThirdPartySignerArgs, Token2022Payment, Token2022PaymentArgs, TokenBurn, TokenBurnArgs, TokenGate, TokenGateArgs, TokenPayment, TokenPaymentArgs } from '../generated';
import { GuardSet, GuardSetArgs, GuardSetMintArgs, GuardSetRouteArgs } from '../guards/guardSet';
import { AllocationMintArgs, AllocationRouteArgs } from './allocation';
import { AllowListMintArgs, AllowListRouteArgs } from './allowList';
import { FreezeSolPaymentMintArgs, FreezeSolPaymentRouteArgs } from './freezeSolPayment';
import { FreezeTokenPaymentMintArgs, FreezeTokenPaymentRouteArgs } from './freezeTokenPayment';
import { GatekeeperMintArgs } from './gatekeeper';
import { MintLimitMintArgs } from './mintLimit';
import { NftBurnMintArgs } from './nftBurn';
import { NftGateMintArgs } from './nftGate';
import { NftPaymentMintArgs } from './nftPayment';
import { SolPaymentMintArgs } from './solPayment';
import { ThirdPartySignerMintArgs } from './thirdPartySigner';
import { Token2022PaymentMintArgs } from './token2022Payment';
import { TokenBurnMintArgs } from './tokenBurn';
import { TokenGateMintArgs } from './tokenGate';
import { TokenPaymentMintArgs } from './tokenPayment';
/**
 * The arguments for all default Candy Machine guards.
 */
export declare type DefaultGuardSetArgs = GuardSetArgs & {
    botTax: OptionOrNullable<BotTaxArgs>;
    solPayment: OptionOrNullable<SolPaymentArgs>;
    tokenPayment: OptionOrNullable<TokenPaymentArgs>;
    startDate: OptionOrNullable<StartDateArgs>;
    thirdPartySigner: OptionOrNullable<ThirdPartySignerArgs>;
    tokenGate: OptionOrNullable<TokenGateArgs>;
    gatekeeper: OptionOrNullable<GatekeeperArgs>;
    endDate: OptionOrNullable<EndDateArgs>;
    allowList: OptionOrNullable<AllowListArgs>;
    mintLimit: OptionOrNullable<MintLimitArgs>;
    nftPayment: OptionOrNullable<NftPaymentArgs>;
    redeemedAmount: OptionOrNullable<RedeemedAmountArgs>;
    addressGate: OptionOrNullable<AddressGateArgs>;
    nftGate: OptionOrNullable<NftGateArgs>;
    nftBurn: OptionOrNullable<NftBurnArgs>;
    tokenBurn: OptionOrNullable<TokenBurnArgs>;
    freezeSolPayment: OptionOrNullable<FreezeSolPaymentArgs>;
    freezeTokenPayment: OptionOrNullable<FreezeTokenPaymentArgs>;
    programGate: OptionOrNullable<ProgramGateArgs>;
    allocation: OptionOrNullable<AllocationArgs>;
    token2022Payment: OptionOrNullable<Token2022PaymentArgs>;
};
/**
 * The data for all default Candy Machine guards.
 */
export declare type DefaultGuardSet = GuardSet & {
    botTax: Option<BotTax>;
    solPayment: Option<SolPayment>;
    tokenPayment: Option<TokenPayment>;
    startDate: Option<StartDate>;
    thirdPartySigner: Option<ThirdPartySigner>;
    tokenGate: Option<TokenGate>;
    gatekeeper: Option<Gatekeeper>;
    endDate: Option<EndDate>;
    allowList: Option<AllowList>;
    mintLimit: Option<MintLimit>;
    nftPayment: Option<NftPayment>;
    redeemedAmount: Option<RedeemedAmount>;
    addressGate: Option<AddressGate>;
    nftGate: Option<NftGate>;
    nftBurn: Option<NftBurn>;
    tokenBurn: Option<TokenBurn>;
    freezeSolPayment: Option<FreezeSolPayment>;
    freezeTokenPayment: Option<FreezeTokenPayment>;
    programGate: Option<ProgramGate>;
    allocation: Option<Allocation>;
    token2022Payment: Option<Token2022Payment>;
};
/**
 * The mint arguments for all default Candy Machine guards.
 */
export declare type DefaultGuardSetMintArgs = GuardSetMintArgs & {
    solPayment: OptionOrNullable<SolPaymentMintArgs>;
    tokenPayment: OptionOrNullable<TokenPaymentMintArgs>;
    thirdPartySigner: OptionOrNullable<ThirdPartySignerMintArgs>;
    tokenGate: OptionOrNullable<TokenGateMintArgs>;
    gatekeeper: OptionOrNullable<GatekeeperMintArgs>;
    allowList: OptionOrNullable<AllowListMintArgs>;
    mintLimit: OptionOrNullable<MintLimitMintArgs>;
    nftPayment: OptionOrNullable<NftPaymentMintArgs>;
    nftGate: OptionOrNullable<NftGateMintArgs>;
    nftBurn: OptionOrNullable<NftBurnMintArgs>;
    tokenBurn: OptionOrNullable<TokenBurnMintArgs>;
    freezeSolPayment: OptionOrNullable<FreezeSolPaymentMintArgs>;
    freezeTokenPayment: OptionOrNullable<FreezeTokenPaymentMintArgs>;
    allocation: OptionOrNullable<AllocationMintArgs>;
    token2022Payment: OptionOrNullable<Token2022PaymentMintArgs>;
};
/**
 * The route arguments for all default Candy Machine guards.
 */
export declare type DefaultGuardSetRouteArgs = GuardSetRouteArgs & {
    allowList: AllowListRouteArgs;
    freezeSolPayment: FreezeSolPaymentRouteArgs;
    freezeTokenPayment: FreezeTokenPaymentRouteArgs;
    allocation: AllocationRouteArgs;
};
/** @internal */
export declare const defaultCandyGuardNames: string[];
/** @internal */
export declare const emptyDefaultGuardSetArgs: DefaultGuardSetArgs;
