"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCandyMachineAccountDataSerializer = void 0;
const mpl_token_metadata_1 = require("@metaplex-foundation/mpl-token-metadata");
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const constants_1 = require("../constants");
const candyMachineAccountData_1 = require("../generated/types/candyMachineAccountData");
function getCandyMachineAccountDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, candyMachineAccountData_1.getCandyMachineAccountDataSerializer)(), (args) => args, (base, bytes, offset) => {
        const slice = bytes.slice(offset + constants_1.CANDY_MACHINE_HIDDEN_SECTION);
        const deserializeRuleSet = (ruleBytes, ruleOffset = 0) => {
            if (!(0, mpl_token_metadata_1.isProgrammable)(base.tokenStandard))
                return [(0, umi_1.none)(), ruleOffset];
            return (0, serializers_1.option)((0, serializers_1.publicKey)(), { fixed: true }).deserialize(ruleBytes, ruleOffset);
        };
        if ((0, umi_1.isNone)(base.data.configLineSettings)) {
            return {
                ...base,
                items: [],
                itemsLoaded: 0,
                ruleSet: deserializeRuleSet(slice)[0],
            };
        }
        const itemsAvailable = Number(base.data.itemsAvailable);
        const itemsMinted = Number(base.itemsRedeemed);
        const itemsRemaining = itemsAvailable - itemsMinted;
        const { isSequential, nameLength, uriLength, prefixName, prefixUri } = base.data.configLineSettings.value;
        const hiddenSectionSerializer = (0, serializers_1.struct)([
            ['itemsLoaded', (0, serializers_1.u32)()],
            [
                'rawConfigLines',
                (0, serializers_1.array)((0, serializers_1.struct)([
                    ['name', (0, serializers_1.string)({ size: nameLength })],
                    ['uri', (0, serializers_1.string)({ size: uriLength })],
                ]), { size: itemsAvailable }),
            ],
            ['itemsLoadedMap', (0, serializers_1.bitArray)(Math.floor(itemsAvailable / 8) + 1)],
            ['itemsLeftToMint', (0, serializers_1.array)((0, serializers_1.u32)(), { size: itemsAvailable })],
        ]);
        const [hiddenSection, hiddenSectionOffset] = hiddenSectionSerializer.deserialize(slice);
        const itemsLeftToMint = hiddenSection.itemsLeftToMint.slice(0, itemsRemaining);
        const items = [];
        hiddenSection.itemsLoadedMap.forEach((loaded, index) => {
            if (!loaded)
                return;
            const rawItem = hiddenSection.rawConfigLines[index];
            items.push({
                index,
                minted: isSequential
                    ? index < itemsMinted
                    : !itemsLeftToMint.includes(index),
                name: replaceItemPattern(prefixName, index) + rawItem.name,
                uri: replaceItemPattern(prefixUri, index) + rawItem.uri,
            });
        });
        return {
            ...base,
            items,
            itemsLoaded: hiddenSection.itemsLoaded,
            ruleSet: deserializeRuleSet(slice, hiddenSectionOffset)[0],
        };
    });
}
exports.getCandyMachineAccountDataSerializer = getCandyMachineAccountDataSerializer;
function replaceItemPattern(value, index) {
    return value.replace('$ID+1$', `${index + 1}`).replace('$ID$', `${index}`);
}
//# sourceMappingURL=candyMachineAccountData.js.map