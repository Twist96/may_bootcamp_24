/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { TokenStandardArgs } from '@metaplex-foundation/mpl-token-metadata';
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { CandyMachineAccountData } from '../../hooked';
import { AccountVersionArgs, CandyMachineDataArgs } from '../types';
/** Candy machine state and config data. */
export declare type CandyMachine = Account<CandyMachineAccountData>;
export declare function deserializeCandyMachine(rawAccount: RpcAccount): CandyMachine;
export declare function fetchCandyMachine(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<CandyMachine>;
export declare function safeFetchCandyMachine(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<CandyMachine | null>;
export declare function fetchAllCandyMachine(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<CandyMachine[]>;
export declare function safeFetchAllCandyMachine(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<CandyMachine[]>;
export declare function getCandyMachineGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<CandyMachine, {
    discriminator: Array<number>;
    version: AccountVersionArgs;
    tokenStandard: TokenStandardArgs;
    features: Array<number>;
    authority: PublicKey;
    mintAuthority: PublicKey;
    collectionMint: PublicKey;
    itemsRedeemed: number | bigint;
    data: CandyMachineDataArgs;
}>;
