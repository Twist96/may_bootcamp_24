"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mplCandyMachine = void 0;
const mpl_token_metadata_1 = require("@metaplex-foundation/mpl-token-metadata");
const defaultGuards_1 = require("./defaultGuards");
const generated_1 = require("./generated");
const guards_1 = require("./guards");
const programs_1 = require("./programs");
const mplCandyMachine = () => ({
    install(umi) {
        umi.use((0, mpl_token_metadata_1.mplTokenMetadata)());
        // Programs.
        umi.programs.add((0, generated_1.createMplCandyMachineCoreProgram)(), false);
        umi.programs.add({
            ...(0, generated_1.createMplCandyGuardProgram)(),
            availableGuards: defaultGuards_1.defaultCandyGuardNames,
        }, false);
        umi.programs.add((0, programs_1.createCivicGatewayProgram)(), false);
        umi.programs.add((0, programs_1.createMplTokenAuthRulesProgram)(), false);
        // Default Guards.
        umi.guards = new guards_1.DefaultGuardRepository();
        umi.guards.add(defaultGuards_1.botTaxGuardManifest, defaultGuards_1.solPaymentGuardManifest, defaultGuards_1.tokenPaymentGuardManifest, defaultGuards_1.startDateGuardManifest, defaultGuards_1.thirdPartySignerGuardManifest, defaultGuards_1.tokenGateGuardManifest, defaultGuards_1.gatekeeperGuardManifest, defaultGuards_1.endDateGuardManifest, defaultGuards_1.allowListGuardManifest, defaultGuards_1.mintLimitGuardManifest, defaultGuards_1.nftPaymentGuardManifest, defaultGuards_1.redeemedAmountGuardManifest, defaultGuards_1.addressGateGuardManifest, defaultGuards_1.nftGateGuardManifest, defaultGuards_1.nftBurnGuardManifest, defaultGuards_1.tokenBurnGuardManifest, defaultGuards_1.freezeSolPaymentGuardManifest, defaultGuards_1.freezeTokenPaymentGuardManifest, defaultGuards_1.programGateGuardManifest, defaultGuards_1.allocationGuardManifest, defaultGuards_1.token2022PaymentGuardManifest);
    },
});
exports.mplCandyMachine = mplCandyMachine;
//# sourceMappingURL=plugin.js.map