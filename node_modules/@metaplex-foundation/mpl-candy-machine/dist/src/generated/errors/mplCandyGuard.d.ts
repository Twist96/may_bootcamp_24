/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Program, ProgramError } from '@metaplex-foundation/umi';
/** InvalidAccountSize: Could not save guard to account */
export declare class CgInvalidAccountSizeError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** DeserializationError: Could not deserialize guard */
export declare class CgDeserializationErrorError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** PublicKeyMismatch: Public key mismatch */
export declare class CgPublicKeyMismatchError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** DataIncrementLimitExceeded: Exceeded account increase limit */
export declare class CgDataIncrementLimitExceededError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** IncorrectOwner: Account does not have correct owner */
export declare class CgIncorrectOwnerError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** Uninitialized: Account is not initialized */
export declare class CgUninitializedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingRemainingAccount: Missing expected remaining account */
export declare class CgMissingRemainingAccountError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NumericalOverflowError: Numerical overflow error */
export declare class CgNumericalOverflowErrorError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** RequiredGroupLabelNotFound: Missing required group label */
export declare class CgRequiredGroupLabelNotFoundError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** GroupNotFound: Group not found */
export declare class CgGroupNotFoundError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** ExceededLength: Value exceeded maximum length */
export declare class CgExceededLengthError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** CandyMachineEmpty: Candy machine is empty */
export declare class CgCandyMachineEmptyError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InstructionNotFound: No instruction was found */
export declare class CgInstructionNotFoundError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** CollectionKeyMismatch: Collection public key mismatch */
export declare class CgCollectionKeyMismatchError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingCollectionAccounts: Missing collection accounts */
export declare class CgMissingCollectionAccountsError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** CollectionUpdateAuthorityKeyMismatch: Collection update authority public key mismatch */
export declare class CgCollectionUpdateAuthorityKeyMismatchError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MintNotLastTransaction: Mint must be the last instructions of the transaction */
export declare class CgMintNotLastTransactionError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MintNotLive: Mint is not live */
export declare class CgMintNotLiveError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NotEnoughSOL: Not enough SOL to pay for the mint */
export declare class CgNotEnoughSOLError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** TokenBurnFailed: Token burn failed */
export declare class CgTokenBurnFailedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NotEnoughTokens: Not enough tokens on the account */
export declare class CgNotEnoughTokensError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** TokenTransferFailed: Token transfer failed */
export declare class CgTokenTransferFailedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingRequiredSignature: A signature was required but not found */
export declare class CgMissingRequiredSignatureError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** GatewayTokenInvalid: Gateway token is not valid */
export declare class CgGatewayTokenInvalidError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AfterEndDate: Current time is after the set end date */
export declare class CgAfterEndDateError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidMintTime: Current time is not within the allowed mint time */
export declare class CgInvalidMintTimeError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AddressNotFoundInAllowedList: Address not found on the allowed list */
export declare class CgAddressNotFoundInAllowedListError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingAllowedListProof: Missing allowed list proof */
export declare class CgMissingAllowedListProofError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AllowedListNotEnabled: Allow list guard is not enabled */
export declare class CgAllowedListNotEnabledError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AllowedMintLimitReached: The maximum number of allowed mints was reached */
export declare class CgAllowedMintLimitReachedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidNftCollection: Invalid NFT collection */
export declare class CgInvalidNftCollectionError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingNft: Missing NFT on the account */
export declare class CgMissingNftError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MaximumRedeemedAmount: Current redemeed items is at the set maximum amount */
export declare class CgMaximumRedeemedAmountError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AddressNotAuthorized: Address not authorized */
export declare class CgAddressNotAuthorizedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingFreezeInstruction: Missing freeze instruction data */
export declare class CgMissingFreezeInstructionError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** FreezeGuardNotEnabled: Freeze guard must be enabled */
export declare class CgFreezeGuardNotEnabledError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** FreezeNotInitialized: Freeze must be initialized */
export declare class CgFreezeNotInitializedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingFreezePeriod: Missing freeze period */
export declare class CgMissingFreezePeriodError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** FreezeEscrowAlreadyExists: The freeze escrow account already exists */
export declare class CgFreezeEscrowAlreadyExistsError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** ExceededMaximumFreezePeriod: Maximum freeze period exceeded */
export declare class CgExceededMaximumFreezePeriodError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** ThawNotEnabled: Thaw is not enabled */
export declare class CgThawNotEnabledError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** UnlockNotEnabled: Unlock is not enabled (not all NFTs are thawed) */
export declare class CgUnlockNotEnabledError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** DuplicatedGroupLabel: Duplicated group label */
export declare class CgDuplicatedGroupLabelError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** DuplicatedMintLimitId: Duplicated mint limit id */
export declare class CgDuplicatedMintLimitIdError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** UnauthorizedProgramFound: An unauthorized program was found in the transaction */
export declare class CgUnauthorizedProgramFoundError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** ExceededProgramListSize: Exceeded the maximum number of programs in the additional list */
export declare class CgExceededProgramListSizeError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AllocationNotInitialized: Allocation PDA not initialized */
export declare class CgAllocationNotInitializedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AllocationLimitReached: Allocation limit was reached */
export declare class CgAllocationLimitReachedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AllocationGuardNotEnabled: Allocation guard must be enabled */
export declare class CgAllocationGuardNotEnabledError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidMintAuthority: Candy machine has an invalid mint authority */
export declare class CgInvalidMintAuthorityError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InstructionBuilderFailed: Instruction could not be created */
export declare class CgInstructionBuilderFailedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidAccountVersion: Invalid account version */
export declare class CgInvalidAccountVersionError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export declare function getMplCandyGuardErrorFromCode(code: number, program: Program, cause?: Error): ProgramError | null;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export declare function getMplCandyGuardErrorFromName(name: string, program: Program, cause?: Error): ProgramError | null;
