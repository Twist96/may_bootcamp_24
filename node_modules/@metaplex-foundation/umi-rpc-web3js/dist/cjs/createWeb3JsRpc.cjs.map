{"version":3,"file":"createWeb3JsRpc.cjs","sources":["../../src/createWeb3JsRpc.ts"],"sourcesContent":["import {\n  ACCOUNT_HEADER_SIZE,\n  BlockhashWithExpiryBlockHeight,\n  Cluster,\n  Commitment,\n  CompiledInstruction,\n  Context,\n  DateTime,\n  ErrorWithLogs,\n  MaybeRpcAccount,\n  ProgramError,\n  PublicKey,\n  RpcAccount,\n  RpcAccountExistsOptions,\n  RpcAirdropOptions,\n  RpcCallOptions,\n  RpcConfirmTransactionOptions,\n  RpcConfirmTransactionResult,\n  RpcDataFilter,\n  RpcGetAccountOptions,\n  RpcGetAccountsOptions,\n  RpcGetBalanceOptions,\n  RpcGetBlockTimeOptions,\n  RpcGetLatestBlockhashOptions,\n  RpcGetProgramAccountsOptions,\n  RpcGetRentOptions,\n  RpcGetSignatureStatusesOptions,\n  RpcGetSlotOptions,\n  RpcGetTransactionOptions,\n  RpcInterface,\n  RpcSendTransactionOptions,\n  SolAmount,\n  Transaction,\n  TransactionMetaInnerInstruction,\n  TransactionMetaTokenBalance,\n  TransactionSignature,\n  TransactionStatus,\n  TransactionWithMeta,\n  createAmount,\n  dateTime,\n  isZeroAmount,\n  lamports,\n  resolveClusterFromEndpoint,\n} from '@metaplex-foundation/umi';\nimport {\n  fromWeb3JsMessage,\n  fromWeb3JsPublicKey,\n  toWeb3JsPublicKey,\n} from '@metaplex-foundation/umi-web3js-adapters';\nimport { base58 } from '@metaplex-foundation/umi/serializers';\nimport {\n  AccountInfo as Web3JsAccountInfo,\n  Connection as Web3JsConnection,\n  ConnectionConfig as Web3JsConnectionConfig,\n  GetProgramAccountsFilter as Web3JsGetProgramAccountsFilter,\n  PublicKey as Web3JsPublicKey,\n  TokenBalance as Web3JsTokenBalance,\n  TransactionConfirmationStrategy as Web3JsTransactionConfirmationStrategy,\n} from '@solana/web3.js';\nimport type { JSONRPCCallbackTypePlain } from 'jayson';\nimport type RpcClient from 'jayson/lib/client/browser';\n\nexport type Web3JsRpcOptions = Commitment | Web3JsConnectionConfig;\n\nexport function createWeb3JsRpc(\n  context: Pick<Context, 'programs' | 'transactions'>,\n  endpoint: string,\n  rpcOptions?: Web3JsRpcOptions\n): RpcInterface & { connection: Web3JsConnection };\nexport function createWeb3JsRpc(\n  context: Pick<Context, 'programs' | 'transactions'>,\n  connection: Web3JsConnection\n): RpcInterface & { connection: Web3JsConnection };\nexport function createWeb3JsRpc(\n  context: Pick<Context, 'programs' | 'transactions'>,\n  endpointOrConnection: string | Web3JsConnection,\n  rpcOptions?: Web3JsRpcOptions\n): RpcInterface & { connection: Web3JsConnection } {\n  let connection: Web3JsConnection | null = null;\n  const getConnection = () => {\n    if (connection) {\n      return connection;\n    }\n    if (typeof endpointOrConnection === 'string') {\n      connection = new Web3JsConnection(endpointOrConnection, rpcOptions);\n    } else {\n      connection = endpointOrConnection;\n    }\n    return connection;\n  };\n\n  const cluster = resolveClusterFromEndpoint(getConnection().rpcEndpoint);\n\n  const getAccount = async (\n    publicKey: PublicKey,\n    options: RpcGetAccountOptions = {}\n  ): Promise<MaybeRpcAccount> => {\n    const account = await getConnection().getAccountInfo(\n      toWeb3JsPublicKey(publicKey),\n      options\n    );\n    return parseMaybeAccount(account, publicKey);\n  };\n\n  const getAccounts = async (\n    publicKeys: PublicKey[],\n    options: RpcGetAccountsOptions = {}\n  ): Promise<MaybeRpcAccount[]> => {\n    const accounts = await getConnection().getMultipleAccountsInfo(\n      publicKeys.map(toWeb3JsPublicKey),\n      options\n    );\n    return accounts.map((account, index) =>\n      parseMaybeAccount(account, publicKeys[index])\n    );\n  };\n\n  const getProgramAccounts = async (\n    programId: PublicKey,\n    options: RpcGetProgramAccountsOptions = {}\n  ): Promise<RpcAccount[]> => {\n    const accounts = await getConnection().getProgramAccounts(\n      toWeb3JsPublicKey(programId),\n      {\n        ...options,\n        filters: options.filters?.map((filter) => parseDataFilter(filter)),\n      }\n    );\n    return accounts.map(({ pubkey, account }) =>\n      parseAccount(account, fromWeb3JsPublicKey(pubkey))\n    );\n  };\n\n  const getBlockTime = async (\n    slot: number,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _options: RpcGetBlockTimeOptions = {}\n  ): Promise<DateTime | null> => {\n    const blockTime = await getConnection().getBlockTime(slot);\n    return blockTime ? dateTime(blockTime) : null;\n  };\n\n  const getBalance = async (\n    publicKey: PublicKey,\n    options: RpcGetBalanceOptions = {}\n  ): Promise<SolAmount> => {\n    const balanceInLamports = await getConnection().getBalance(\n      toWeb3JsPublicKey(publicKey),\n      options\n    );\n    return lamports(balanceInLamports);\n  };\n\n  const getRent = async (\n    bytes: number,\n    options: RpcGetRentOptions = {}\n  ): Promise<SolAmount> => {\n    const rentFor = (bytes: number) =>\n      getConnection().getMinimumBalanceForRentExemption(\n        bytes,\n        options.commitment\n      );\n    if (options.includesHeaderBytes ?? false) {\n      const headerRent = await rentFor(0);\n      const rentPerByte = BigInt(headerRent) / BigInt(ACCOUNT_HEADER_SIZE);\n      return lamports(rentPerByte * BigInt(bytes));\n    }\n    return lamports(await rentFor(bytes));\n  };\n\n  const getLatestBlockhash = async (\n    options: RpcGetLatestBlockhashOptions = {}\n  ): Promise<BlockhashWithExpiryBlockHeight> =>\n    getConnection().getLatestBlockhash(options);\n\n  const getTransaction = async (\n    signature: TransactionSignature,\n    options: RpcGetTransactionOptions = {}\n  ): Promise<TransactionWithMeta | null> => {\n    const response = await getConnection().getTransaction(\n      base58.deserialize(signature)[0],\n      {\n        commitment: options.commitment as 'confirmed' | 'finalized' | undefined,\n        maxSupportedTransactionVersion: 0,\n      }\n    );\n\n    if (!response) {\n      return null;\n    }\n\n    if (!response.meta) {\n      // TODO: Custom error.\n      throw new Error('Transaction meta is missing.');\n    }\n\n    const { transaction, meta } = response;\n    const message = fromWeb3JsMessage(transaction.message);\n    const mapPublicKey = (key: string) =>\n      fromWeb3JsPublicKey(new Web3JsPublicKey(key));\n    const mapTokenBalance = (\n      tokenBalance: Web3JsTokenBalance\n    ): TransactionMetaTokenBalance => ({\n      accountIndex: tokenBalance.accountIndex,\n      amount: createAmount(\n        tokenBalance.uiTokenAmount.amount,\n        'splToken',\n        tokenBalance.uiTokenAmount.decimals\n      ),\n      mint: mapPublicKey(tokenBalance.mint),\n      owner: tokenBalance.owner ? mapPublicKey(tokenBalance.owner) : null,\n    });\n\n    return {\n      message,\n      serializedMessage: context.transactions.serializeMessage(message),\n      signatures: transaction.signatures.map(base58.serialize),\n      meta: {\n        fee: lamports(meta.fee),\n        logs: meta.logMessages ?? [],\n        preBalances: meta.preBalances.map(lamports),\n        postBalances: meta.postBalances.map(lamports),\n        preTokenBalances: (meta.preTokenBalances ?? []).map(mapTokenBalance),\n        postTokenBalances: (meta.postTokenBalances ?? []).map(mapTokenBalance),\n        innerInstructions:\n          meta.innerInstructions?.map(\n            (inner): TransactionMetaInnerInstruction => ({\n              index: inner.index,\n              instructions: inner.instructions.map(\n                (instruction): CompiledInstruction => ({\n                  programIndex: instruction.programIdIndex,\n                  accountIndexes: instruction.accounts,\n                  data: base58.serialize(instruction.data),\n                })\n              ),\n            })\n          ) ?? null,\n        loadedAddresses: {\n          writable: (meta.loadedAddresses?.writable ?? []).map(\n            fromWeb3JsPublicKey\n          ),\n          readonly: (meta.loadedAddresses?.readonly ?? []).map(\n            fromWeb3JsPublicKey\n          ),\n        },\n        computeUnitsConsumed: meta.computeUnitsConsumed\n          ? BigInt(meta.computeUnitsConsumed)\n          : null,\n        err: meta.err,\n      },\n    };\n  };\n\n  const getSignatureStatuses = async (\n    signatures: TransactionSignature[],\n    options: RpcGetSignatureStatusesOptions = {}\n  ): Promise<Array<TransactionStatus | null>> => {\n    const response = await getConnection().getSignatureStatuses(\n      signatures.map((signature) => base58.deserialize(signature)[0]),\n      { searchTransactionHistory: options?.searchTransactionHistory ?? false }\n    );\n    return response.value.map((status) => {\n      if (!status) return null;\n      return {\n        slot: status.slot,\n        confirmations: status.confirmations,\n        error: status.err,\n        commitment: status.confirmationStatus ?? null,\n      };\n    });\n  };\n\n  const accountExists = async (\n    publicKey: PublicKey,\n    options: RpcAccountExistsOptions = {}\n  ): Promise<boolean> => !isZeroAmount(await getBalance(publicKey, options));\n\n  const airdrop = async (\n    publicKey: PublicKey,\n    amount: SolAmount,\n    options: RpcAirdropOptions = {}\n  ): Promise<void> => {\n    const signature = await getConnection().requestAirdrop(\n      toWeb3JsPublicKey(publicKey),\n      Number(amount.basisPoints)\n    );\n    if (options.strategy) {\n      await confirmTransaction(\n        base58.serialize(signature),\n        options as RpcConfirmTransactionOptions\n      );\n      return;\n    }\n    await confirmTransaction(base58.serialize(signature), {\n      ...options,\n      strategy: { type: 'blockhash', ...(await getLatestBlockhash()) },\n    });\n  };\n\n  const call = async <Result, Params extends any[] = any[]>(\n    method: string,\n    params?: [...Params],\n    options: RpcCallOptions = {}\n  ): Promise<Result> => {\n    const client = (getConnection() as any)._rpcClient as RpcClient;\n    const resolvedParams = resolveCallParams(\n      (params ? [...params] : []) as [...Params],\n      options.commitment,\n      options.extra\n    );\n    return new Promise((resolve, reject) => {\n      const callback: JSONRPCCallbackTypePlain = (error, response) =>\n        error ? reject(error) : resolve(response.result);\n      if (options.id) {\n        client.request(method, resolvedParams, options.id, callback);\n      } else {\n        client.request(method, resolvedParams, callback);\n      }\n    });\n  };\n\n  const sendTransaction = async (\n    transaction: Transaction,\n    options: RpcSendTransactionOptions = {}\n  ): Promise<TransactionSignature> => {\n    try {\n      const signature = await getConnection().sendRawTransaction(\n        context.transactions.serialize(transaction),\n        options\n      );\n      return base58.serialize(signature);\n    } catch (error: any) {\n      let resolvedError: ProgramError | null = null;\n      if (error instanceof Error && 'logs' in error) {\n        resolvedError = context.programs.resolveError(\n          error as ErrorWithLogs,\n          transaction\n        );\n      }\n      throw resolvedError || error;\n    }\n  };\n\n  const confirmTransaction = async (\n    signature: TransactionSignature,\n    options: RpcConfirmTransactionOptions\n  ): Promise<RpcConfirmTransactionResult> =>\n    getConnection().confirmTransaction(\n      parseConfirmStrategy(signature, options),\n      options.commitment\n    );\n\n  return {\n    getEndpoint: (): string => getConnection().rpcEndpoint,\n    getCluster: (): Cluster => cluster,\n    getAccount,\n    getAccounts,\n    getProgramAccounts,\n    getBlockTime,\n    getBalance,\n    getRent,\n    getSlot: async (options: RpcGetSlotOptions = {}) =>\n      getConnection().getSlot(options),\n    getLatestBlockhash,\n    getTransaction,\n    getSignatureStatuses,\n    accountExists,\n    airdrop,\n    call,\n    sendTransaction,\n    confirmTransaction,\n\n    get connection() {\n      return getConnection();\n    },\n  };\n}\n\nfunction parseAccount(\n  account: Web3JsAccountInfo<Uint8Array>,\n  publicKey: PublicKey\n): RpcAccount {\n  return {\n    executable: account.executable,\n    owner: fromWeb3JsPublicKey(account.owner),\n    lamports: lamports(account.lamports),\n    rentEpoch: account.rentEpoch ? BigInt(account.rentEpoch) : undefined,\n    publicKey,\n    data: new Uint8Array(account.data),\n  };\n}\n\nfunction parseMaybeAccount(\n  account: Web3JsAccountInfo<Uint8Array> | null,\n  publicKey: PublicKey\n): MaybeRpcAccount {\n  return account\n    ? { ...parseAccount(account, publicKey), exists: true }\n    : { exists: false, publicKey };\n}\n\nfunction parseDataFilter(\n  filter: RpcDataFilter\n): Web3JsGetProgramAccountsFilter {\n  if (!('memcmp' in filter)) return filter;\n  const { bytes, ...rest } = filter.memcmp;\n  return { memcmp: { ...rest, bytes: base58.deserialize(bytes)[0] } };\n}\n\nfunction parseConfirmStrategy(\n  signature: TransactionSignature,\n  options: RpcConfirmTransactionOptions\n): Web3JsTransactionConfirmationStrategy {\n  if (options.strategy.type === 'blockhash') {\n    return {\n      ...options.strategy,\n      signature: base58.deserialize(signature)[0],\n    };\n  }\n  return {\n    ...options.strategy,\n    signature: base58.deserialize(signature)[0],\n    nonceAccountPubkey: toWeb3JsPublicKey(options.strategy.nonceAccountPubkey),\n  };\n}\n\nfunction resolveCallParams<Params extends any[]>(\n  args: Params,\n  commitment?: Commitment,\n  extra?: object\n): Params {\n  if (!commitment && !extra) return args;\n  let options: any = {};\n  if (commitment) options.commitment = commitment;\n  if (extra) options = { ...options, ...extra };\n  args.push(options);\n  return args;\n}\n"],"names":["createWeb3JsRpc","context","endpointOrConnection","rpcOptions","connection","getConnection","Web3JsConnection","cluster","resolveClusterFromEndpoint","rpcEndpoint","getAccount","publicKey","options","account","getAccountInfo","toWeb3JsPublicKey","parseMaybeAccount","getAccounts","publicKeys","accounts","getMultipleAccountsInfo","map","index","getProgramAccounts","programId","filters","filter","parseDataFilter","pubkey","parseAccount","fromWeb3JsPublicKey","getBlockTime","slot","_options","blockTime","dateTime","getBalance","balanceInLamports","lamports","getRent","bytes","rentFor","getMinimumBalanceForRentExemption","commitment","includesHeaderBytes","headerRent","rentPerByte","BigInt","ACCOUNT_HEADER_SIZE","getLatestBlockhash","getTransaction","signature","response","base58","deserialize","maxSupportedTransactionVersion","meta","Error","transaction","message","fromWeb3JsMessage","mapPublicKey","key","Web3JsPublicKey","mapTokenBalance","tokenBalance","accountIndex","amount","createAmount","uiTokenAmount","decimals","mint","owner","serializedMessage","transactions","serializeMessage","signatures","serialize","fee","logs","logMessages","preBalances","postBalances","preTokenBalances","postTokenBalances","innerInstructions","inner","instructions","instruction","programIndex","programIdIndex","accountIndexes","data","loadedAddresses","writable","readonly","computeUnitsConsumed","err","getSignatureStatuses","searchTransactionHistory","value","status","confirmations","error","confirmationStatus","accountExists","isZeroAmount","airdrop","requestAirdrop","Number","basisPoints","strategy","confirmTransaction","type","call","method","params","client","_rpcClient","resolvedParams","resolveCallParams","extra","Promise","resolve","reject","callback","result","id","request","sendTransaction","sendRawTransaction","resolvedError","programs","resolveError","parseConfirmStrategy","getEndpoint","getCluster","getSlot","executable","rentEpoch","undefined","Uint8Array","exists","rest","memcmp","nonceAccountPubkey","args","push"],"mappings":"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"}