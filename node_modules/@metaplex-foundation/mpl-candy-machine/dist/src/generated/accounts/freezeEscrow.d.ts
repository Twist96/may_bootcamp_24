/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Option, OptionOrNullable, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
/** PDA to store the frozen funds. */
export declare type FreezeEscrow = Account<FreezeEscrowAccountData>;
export declare type FreezeEscrowAccountData = {
    discriminator: Array<number>;
    /** Candy guard address associated with this escrow. */
    candyGuard: PublicKey;
    /** Candy machine address associated with this escrow. */
    candyMachine: PublicKey;
    /** Number of NFTs frozen. */
    frozenCount: bigint;
    /**
     * The timestamp of the first (frozen) mint. This is used to calculate
     * when the freeze period is over.
     */
    firstMintTime: Option<bigint>;
    /**
     * The amount of time (in seconds) for the freeze. The NFTs will be
     * allowed to thaw after this.
     */
    freezePeriod: bigint;
    /** The destination address for the frozen fund to go to. */
    destination: PublicKey;
    /**
     * The authority that initialized the freeze. This will be the only
     * address able to unlock the funds in case the candy guard account is
     * closed.
     */
    authority: PublicKey;
};
export declare type FreezeEscrowAccountDataArgs = {
    /** Candy guard address associated with this escrow. */
    candyGuard: PublicKey;
    /** Candy machine address associated with this escrow. */
    candyMachine: PublicKey;
    /** Number of NFTs frozen. */
    frozenCount: number | bigint;
    /**
     * The timestamp of the first (frozen) mint. This is used to calculate
     * when the freeze period is over.
     */
    firstMintTime: OptionOrNullable<number | bigint>;
    /**
     * The amount of time (in seconds) for the freeze. The NFTs will be
     * allowed to thaw after this.
     */
    freezePeriod: number | bigint;
    /** The destination address for the frozen fund to go to. */
    destination: PublicKey;
    /**
     * The authority that initialized the freeze. This will be the only
     * address able to unlock the funds in case the candy guard account is
     * closed.
     */
    authority: PublicKey;
};
export declare function getFreezeEscrowAccountDataSerializer(): Serializer<FreezeEscrowAccountDataArgs, FreezeEscrowAccountData>;
export declare function deserializeFreezeEscrow(rawAccount: RpcAccount): FreezeEscrow;
export declare function fetchFreezeEscrow(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<FreezeEscrow>;
export declare function safeFetchFreezeEscrow(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<FreezeEscrow | null>;
export declare function fetchAllFreezeEscrow(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<FreezeEscrow[]>;
export declare function safeFetchAllFreezeEscrow(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<FreezeEscrow[]>;
export declare function getFreezeEscrowGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<FreezeEscrow, {
    discriminator: Array<number>;
    candyGuard: PublicKey;
    candyMachine: PublicKey;
    frozenCount: number | bigint;
    firstMintTime: OptionOrNullable<number | bigint>;
    freezePeriod: number | bigint;
    destination: PublicKey;
    authority: PublicKey;
}>;
export declare function findFreezeEscrowPda(context: Pick<Context, 'eddsa' | 'programs'>, seeds: {
    /** The wallet that will eventually receive the funds */
    destination: PublicKey;
    /** The address of the Candy Guard account */
    candyGuard: PublicKey;
    /** The address of the Candy Machine account */
    candyMachine: PublicKey;
}): Pda;
export declare function fetchFreezeEscrowFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findFreezeEscrowPda>[1], options?: RpcGetAccountOptions): Promise<FreezeEscrow>;
export declare function safeFetchFreezeEscrowFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findFreezeEscrowPda>[1], options?: RpcGetAccountOptions): Promise<FreezeEscrow | null>;
