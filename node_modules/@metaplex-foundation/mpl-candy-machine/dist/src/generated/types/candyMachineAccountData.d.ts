/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { TokenStandard, TokenStandardArgs } from '@metaplex-foundation/mpl-token-metadata';
import { PublicKey } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { AccountVersion, AccountVersionArgs, CandyMachineData, CandyMachineDataArgs } from '.';
/** Candy machine state and config data. */
export declare type CandyMachineAccountData = {
    discriminator: Array<number>;
    /** Version of the account. */
    version: AccountVersion;
    /** Token standard to mint NFTs. */
    tokenStandard: TokenStandard;
    /** Features flags. */
    features: Array<number>;
    /** Authority address. */
    authority: PublicKey;
    /** Authority address allowed to mint from the candy machine. */
    mintAuthority: PublicKey;
    /** The collection mint for the candy machine. */
    collectionMint: PublicKey;
    /** Number of assets redeemed. */
    itemsRedeemed: bigint;
    /** Candy machine configuration data. */
    data: CandyMachineData;
};
export declare type CandyMachineAccountDataArgs = {
    /** Version of the account. */
    version: AccountVersionArgs;
    /** Token standard to mint NFTs. */
    tokenStandard: TokenStandardArgs;
    /** Features flags. */
    features: Array<number>;
    /** Authority address. */
    authority: PublicKey;
    /** Authority address allowed to mint from the candy machine. */
    mintAuthority: PublicKey;
    /** The collection mint for the candy machine. */
    collectionMint: PublicKey;
    /** Number of assets redeemed. */
    itemsRedeemed: number | bigint;
    /** Candy machine configuration data. */
    data: CandyMachineDataArgs;
};
export declare function getCandyMachineAccountDataSerializer(): Serializer<CandyMachineAccountDataArgs, CandyMachineAccountData>;
