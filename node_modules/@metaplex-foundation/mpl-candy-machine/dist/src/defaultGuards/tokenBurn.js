"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tokenBurnGuardManifest = void 0;
const mpl_toolbox_1 = require("@metaplex-foundation/mpl-toolbox");
const generated_1 = require("../generated");
const guards_1 = require("../guards");
/**
 * The tokenBurn guard restricts minting to token holders
 * of a specified mint account and burns the holder's tokens
 * when minting. The `amount` determines how many tokens are required.
 *
 * This guard alone does not limit how many times a holder
 * can mint. A holder can mint as many times as they have
 * the required amount of tokens to burn.
 */
exports.tokenBurnGuardManifest = {
    name: 'tokenBurn',
    serializer: generated_1.getTokenBurnSerializer,
    mintParser: (context, mintContext, args) => {
        const [tokenAccount] = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
            mint: args.mint,
            owner: mintContext.minter.publicKey,
        });
        return {
            data: new Uint8Array(),
            remainingAccounts: [
                { publicKey: tokenAccount, isWritable: true },
                { publicKey: args.mint, isWritable: true },
            ],
        };
    },
    routeParser: guards_1.noopParser,
};
//# sourceMappingURL=tokenBurn.js.map