"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.unwrap = exports.getUnwrapInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getUnwrapInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })]], { description: 'UnwrapInstructionData' }), (value) => ({
        ...value,
        discriminator: [126, 175, 198, 14, 212, 69, 50, 44],
    }));
}
exports.getUnwrapInstructionDataSerializer = getUnwrapInstructionDataSerializer;
// Instruction.
function unwrap(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplCandyGuard', 'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g');
    // Accounts.
    const resolvedAccounts = {
        candyGuard: {
            index: 0,
            isWritable: false,
            value: input.candyGuard ?? null,
        },
        authority: { index: 1, isWritable: false, value: input.authority ?? null },
        candyMachine: {
            index: 2,
            isWritable: true,
            value: input.candyMachine ?? null,
        },
        candyMachineAuthority: {
            index: 3,
            isWritable: false,
            value: input.candyMachineAuthority ?? null,
        },
        candyMachineProgram: {
            index: 4,
            isWritable: false,
            value: input.candyMachineProgram ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity;
    }
    if (!resolvedAccounts.candyMachineAuthority.value) {
        resolvedAccounts.candyMachineAuthority.value = context.identity;
    }
    if (!resolvedAccounts.candyMachineProgram.value) {
        resolvedAccounts.candyMachineProgram.value = context.programs.getPublicKey('mplCandyMachine', 'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR');
        resolvedAccounts.candyMachineProgram.isWritable = false;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getUnwrapInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.unwrap = unwrap;
//# sourceMappingURL=unwrap.js.map