import { TokenStandard } from '@metaplex-foundation/mpl-token-metadata';
import { PublicKey } from '@metaplex-foundation/umi';
import { NftPayment, NftPaymentArgs } from '../generated';
import { GuardManifest } from '../guards';
/**
 * The nftPayment guard allows minting by charging the
 * payer an NFT from a specified NFT collection.
 * The NFT will be transfered to a predefined destination.
 *
 * This means the mint address of the NFT to transfer must be
 * passed when minting. This guard alone does not limit how many
 * times a holder can mint. A holder can mint as many times
 * as they have NFTs from the required collection to pay with.
 */
export declare const nftPaymentGuardManifest: GuardManifest<NftPaymentArgs, NftPayment, NftPaymentMintArgs>;
export declare type NftPaymentMintArgs = Omit<NftPaymentArgs, 'requiredCollection'> & {
    /**
     * The mint address of the NFT to pay with.
     * This must be part of the required collection and must
     * belong to the payer.
     */
    mint: PublicKey;
    /**
     * The token standard of the NFT used to pay.
     */
    tokenStandard: TokenStandard;
    /**
     * The ruleSet of the PNFT used to pay, if any.
     *
     * @defaultValue Default to not using a ruleSet.
     */
    ruleSet?: PublicKey;
    /**
     * The token account linking the NFT with its owner.
     *
     * @defaultValue
     * Defaults to the associated token address using the
     * mint address of the NFT and the payer's address.
     */
    tokenAccount?: PublicKey;
};
