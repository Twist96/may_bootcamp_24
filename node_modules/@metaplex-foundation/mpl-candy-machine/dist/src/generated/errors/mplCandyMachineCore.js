"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMplCandyMachineCoreErrorFromName = exports.getMplCandyMachineCoreErrorFromCode = exports.CmInvalidAccountVersionError = exports.CmMissingSplAtaProgramError = exports.CmMissingInstructionsSysvarError = exports.CmMissingTokenRecordError = exports.CmMissingTokenAccountError = exports.CmInvalidTokenStandardError = exports.CmMissingMetadataDelegateRecordError = exports.CmMissingCollectionAuthorityRecordError = exports.CmInstructionBuilderFailedError = exports.CmNotFullyLoadedError = exports.CmCouldNotRetrieveConfigLineDataError = exports.CmCollectionKeyMismatchError = exports.CmCannotChangeSequentialIndexGenerationError = exports.CmCannotSwitchFromHiddenSettingsError = exports.CmCannotIncreaseLengthError = exports.CmMissingConfigLinesSettingsError = exports.CmExceededLengthErrorError = exports.CmNoChangingCollectionDuringMintError = exports.CmMetadataAccountMustBeEmptyError = exports.CmIncorrectCollectionAuthorityError = exports.CmCannotSwitchToHiddenSettingsError = exports.CmCannotChangeNumberOfLinesError = exports.CmHiddenSettingsDoNotHaveConfigLinesError = exports.CmCandyMachineEmptyError = exports.CmTooManyCreatorsError = exports.CmNumericalOverflowErrorError = exports.CmIndexGreaterThanLengthError = exports.CmMintMismatchError = exports.CmUninitializedError = exports.CmIncorrectOwnerError = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const codeToErrorMap = new Map();
const nameToErrorMap = new Map();
/** IncorrectOwner: Account does not have correct owner */
class CmIncorrectOwnerError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Account does not have correct owner', program, cause);
        this.name = 'IncorrectOwner';
        this.code = 0x1770; // 6000
    }
}
exports.CmIncorrectOwnerError = CmIncorrectOwnerError;
codeToErrorMap.set(0x1770, CmIncorrectOwnerError);
nameToErrorMap.set('IncorrectOwner', CmIncorrectOwnerError);
/** Uninitialized: Account is not initialized */
class CmUninitializedError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Account is not initialized', program, cause);
        this.name = 'Uninitialized';
        this.code = 0x1771; // 6001
    }
}
exports.CmUninitializedError = CmUninitializedError;
codeToErrorMap.set(0x1771, CmUninitializedError);
nameToErrorMap.set('Uninitialized', CmUninitializedError);
/** MintMismatch: Mint Mismatch */
class CmMintMismatchError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Mint Mismatch', program, cause);
        this.name = 'MintMismatch';
        this.code = 0x1772; // 6002
    }
}
exports.CmMintMismatchError = CmMintMismatchError;
codeToErrorMap.set(0x1772, CmMintMismatchError);
nameToErrorMap.set('MintMismatch', CmMintMismatchError);
/** IndexGreaterThanLength: Index greater than length */
class CmIndexGreaterThanLengthError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Index greater than length', program, cause);
        this.name = 'IndexGreaterThanLength';
        this.code = 0x1773; // 6003
    }
}
exports.CmIndexGreaterThanLengthError = CmIndexGreaterThanLengthError;
codeToErrorMap.set(0x1773, CmIndexGreaterThanLengthError);
nameToErrorMap.set('IndexGreaterThanLength', CmIndexGreaterThanLengthError);
/** NumericalOverflowError: Numerical overflow error */
class CmNumericalOverflowErrorError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Numerical overflow error', program, cause);
        this.name = 'NumericalOverflowError';
        this.code = 0x1774; // 6004
    }
}
exports.CmNumericalOverflowErrorError = CmNumericalOverflowErrorError;
codeToErrorMap.set(0x1774, CmNumericalOverflowErrorError);
nameToErrorMap.set('NumericalOverflowError', CmNumericalOverflowErrorError);
/** TooManyCreators: Can only provide up to 4 creators to candy machine (because candy machine is one) */
class CmTooManyCreatorsError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Can only provide up to 4 creators to candy machine (because candy machine is one)', program, cause);
        this.name = 'TooManyCreators';
        this.code = 0x1775; // 6005
    }
}
exports.CmTooManyCreatorsError = CmTooManyCreatorsError;
codeToErrorMap.set(0x1775, CmTooManyCreatorsError);
nameToErrorMap.set('TooManyCreators', CmTooManyCreatorsError);
/** CandyMachineEmpty: Candy machine is empty */
class CmCandyMachineEmptyError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Candy machine is empty', program, cause);
        this.name = 'CandyMachineEmpty';
        this.code = 0x1776; // 6006
    }
}
exports.CmCandyMachineEmptyError = CmCandyMachineEmptyError;
codeToErrorMap.set(0x1776, CmCandyMachineEmptyError);
nameToErrorMap.set('CandyMachineEmpty', CmCandyMachineEmptyError);
/** HiddenSettingsDoNotHaveConfigLines: Candy machines using hidden uris do not have config lines, they have a single hash representing hashed order */
class CmHiddenSettingsDoNotHaveConfigLinesError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Candy machines using hidden uris do not have config lines, they have a single hash representing hashed order', program, cause);
        this.name = 'HiddenSettingsDoNotHaveConfigLines';
        this.code = 0x1777; // 6007
    }
}
exports.CmHiddenSettingsDoNotHaveConfigLinesError = CmHiddenSettingsDoNotHaveConfigLinesError;
codeToErrorMap.set(0x1777, CmHiddenSettingsDoNotHaveConfigLinesError);
nameToErrorMap.set('HiddenSettingsDoNotHaveConfigLines', CmHiddenSettingsDoNotHaveConfigLinesError);
/** CannotChangeNumberOfLines: Cannot change number of lines unless is a hidden config */
class CmCannotChangeNumberOfLinesError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Cannot change number of lines unless is a hidden config', program, cause);
        this.name = 'CannotChangeNumberOfLines';
        this.code = 0x1778; // 6008
    }
}
exports.CmCannotChangeNumberOfLinesError = CmCannotChangeNumberOfLinesError;
codeToErrorMap.set(0x1778, CmCannotChangeNumberOfLinesError);
nameToErrorMap.set('CannotChangeNumberOfLines', CmCannotChangeNumberOfLinesError);
/** CannotSwitchToHiddenSettings: Cannot switch to hidden settings after items available is greater than 0 */
class CmCannotSwitchToHiddenSettingsError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Cannot switch to hidden settings after items available is greater than 0', program, cause);
        this.name = 'CannotSwitchToHiddenSettings';
        this.code = 0x1779; // 6009
    }
}
exports.CmCannotSwitchToHiddenSettingsError = CmCannotSwitchToHiddenSettingsError;
codeToErrorMap.set(0x1779, CmCannotSwitchToHiddenSettingsError);
nameToErrorMap.set('CannotSwitchToHiddenSettings', CmCannotSwitchToHiddenSettingsError);
/** IncorrectCollectionAuthority: Incorrect collection NFT authority */
class CmIncorrectCollectionAuthorityError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Incorrect collection NFT authority', program, cause);
        this.name = 'IncorrectCollectionAuthority';
        this.code = 0x177a; // 6010
    }
}
exports.CmIncorrectCollectionAuthorityError = CmIncorrectCollectionAuthorityError;
codeToErrorMap.set(0x177a, CmIncorrectCollectionAuthorityError);
nameToErrorMap.set('IncorrectCollectionAuthority', CmIncorrectCollectionAuthorityError);
/** MetadataAccountMustBeEmpty: The metadata account has data in it, and this must be empty to mint a new NFT */
class CmMetadataAccountMustBeEmptyError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('The metadata account has data in it, and this must be empty to mint a new NFT', program, cause);
        this.name = 'MetadataAccountMustBeEmpty';
        this.code = 0x177b; // 6011
    }
}
exports.CmMetadataAccountMustBeEmptyError = CmMetadataAccountMustBeEmptyError;
codeToErrorMap.set(0x177b, CmMetadataAccountMustBeEmptyError);
nameToErrorMap.set('MetadataAccountMustBeEmpty', CmMetadataAccountMustBeEmptyError);
/** NoChangingCollectionDuringMint: Can't change collection settings after items have begun to be minted */
class CmNoChangingCollectionDuringMintError extends umi_1.ProgramError {
    constructor(program, cause) {
        super("Can't change collection settings after items have begun to be minted", program, cause);
        this.name = 'NoChangingCollectionDuringMint';
        this.code = 0x177c; // 6012
    }
}
exports.CmNoChangingCollectionDuringMintError = CmNoChangingCollectionDuringMintError;
codeToErrorMap.set(0x177c, CmNoChangingCollectionDuringMintError);
nameToErrorMap.set('NoChangingCollectionDuringMint', CmNoChangingCollectionDuringMintError);
/** ExceededLengthError: Value longer than expected maximum value */
class CmExceededLengthErrorError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Value longer than expected maximum value', program, cause);
        this.name = 'ExceededLengthError';
        this.code = 0x177d; // 6013
    }
}
exports.CmExceededLengthErrorError = CmExceededLengthErrorError;
codeToErrorMap.set(0x177d, CmExceededLengthErrorError);
nameToErrorMap.set('ExceededLengthError', CmExceededLengthErrorError);
/** MissingConfigLinesSettings: Missing config lines settings */
class CmMissingConfigLinesSettingsError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Missing config lines settings', program, cause);
        this.name = 'MissingConfigLinesSettings';
        this.code = 0x177e; // 6014
    }
}
exports.CmMissingConfigLinesSettingsError = CmMissingConfigLinesSettingsError;
codeToErrorMap.set(0x177e, CmMissingConfigLinesSettingsError);
nameToErrorMap.set('MissingConfigLinesSettings', CmMissingConfigLinesSettingsError);
/** CannotIncreaseLength: Cannot increase the length in config lines settings */
class CmCannotIncreaseLengthError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Cannot increase the length in config lines settings', program, cause);
        this.name = 'CannotIncreaseLength';
        this.code = 0x177f; // 6015
    }
}
exports.CmCannotIncreaseLengthError = CmCannotIncreaseLengthError;
codeToErrorMap.set(0x177f, CmCannotIncreaseLengthError);
nameToErrorMap.set('CannotIncreaseLength', CmCannotIncreaseLengthError);
/** CannotSwitchFromHiddenSettings: Cannot switch from hidden settings */
class CmCannotSwitchFromHiddenSettingsError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Cannot switch from hidden settings', program, cause);
        this.name = 'CannotSwitchFromHiddenSettings';
        this.code = 0x1780; // 6016
    }
}
exports.CmCannotSwitchFromHiddenSettingsError = CmCannotSwitchFromHiddenSettingsError;
codeToErrorMap.set(0x1780, CmCannotSwitchFromHiddenSettingsError);
nameToErrorMap.set('CannotSwitchFromHiddenSettings', CmCannotSwitchFromHiddenSettingsError);
/** CannotChangeSequentialIndexGeneration: Cannot change sequential index generation after items have begun to be minted */
class CmCannotChangeSequentialIndexGenerationError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Cannot change sequential index generation after items have begun to be minted', program, cause);
        this.name = 'CannotChangeSequentialIndexGeneration';
        this.code = 0x1781; // 6017
    }
}
exports.CmCannotChangeSequentialIndexGenerationError = CmCannotChangeSequentialIndexGenerationError;
codeToErrorMap.set(0x1781, CmCannotChangeSequentialIndexGenerationError);
nameToErrorMap.set('CannotChangeSequentialIndexGeneration', CmCannotChangeSequentialIndexGenerationError);
/** CollectionKeyMismatch: Collection public key mismatch */
class CmCollectionKeyMismatchError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Collection public key mismatch', program, cause);
        this.name = 'CollectionKeyMismatch';
        this.code = 0x1782; // 6018
    }
}
exports.CmCollectionKeyMismatchError = CmCollectionKeyMismatchError;
codeToErrorMap.set(0x1782, CmCollectionKeyMismatchError);
nameToErrorMap.set('CollectionKeyMismatch', CmCollectionKeyMismatchError);
/** CouldNotRetrieveConfigLineData: Could not retrive config line data */
class CmCouldNotRetrieveConfigLineDataError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Could not retrive config line data', program, cause);
        this.name = 'CouldNotRetrieveConfigLineData';
        this.code = 0x1783; // 6019
    }
}
exports.CmCouldNotRetrieveConfigLineDataError = CmCouldNotRetrieveConfigLineDataError;
codeToErrorMap.set(0x1783, CmCouldNotRetrieveConfigLineDataError);
nameToErrorMap.set('CouldNotRetrieveConfigLineData', CmCouldNotRetrieveConfigLineDataError);
/** NotFullyLoaded: Not all config lines were added to the candy machine */
class CmNotFullyLoadedError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Not all config lines were added to the candy machine', program, cause);
        this.name = 'NotFullyLoaded';
        this.code = 0x1784; // 6020
    }
}
exports.CmNotFullyLoadedError = CmNotFullyLoadedError;
codeToErrorMap.set(0x1784, CmNotFullyLoadedError);
nameToErrorMap.set('NotFullyLoaded', CmNotFullyLoadedError);
/** InstructionBuilderFailed: Instruction could not be created */
class CmInstructionBuilderFailedError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Instruction could not be created', program, cause);
        this.name = 'InstructionBuilderFailed';
        this.code = 0x1785; // 6021
    }
}
exports.CmInstructionBuilderFailedError = CmInstructionBuilderFailedError;
codeToErrorMap.set(0x1785, CmInstructionBuilderFailedError);
nameToErrorMap.set('InstructionBuilderFailed', CmInstructionBuilderFailedError);
/** MissingCollectionAuthorityRecord: Missing collection authority record */
class CmMissingCollectionAuthorityRecordError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Missing collection authority record', program, cause);
        this.name = 'MissingCollectionAuthorityRecord';
        this.code = 0x1786; // 6022
    }
}
exports.CmMissingCollectionAuthorityRecordError = CmMissingCollectionAuthorityRecordError;
codeToErrorMap.set(0x1786, CmMissingCollectionAuthorityRecordError);
nameToErrorMap.set('MissingCollectionAuthorityRecord', CmMissingCollectionAuthorityRecordError);
/** MissingMetadataDelegateRecord: Missing metadata delegate record */
class CmMissingMetadataDelegateRecordError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Missing metadata delegate record', program, cause);
        this.name = 'MissingMetadataDelegateRecord';
        this.code = 0x1787; // 6023
    }
}
exports.CmMissingMetadataDelegateRecordError = CmMissingMetadataDelegateRecordError;
codeToErrorMap.set(0x1787, CmMissingMetadataDelegateRecordError);
nameToErrorMap.set('MissingMetadataDelegateRecord', CmMissingMetadataDelegateRecordError);
/** InvalidTokenStandard: Invalid token standard */
class CmInvalidTokenStandardError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid token standard', program, cause);
        this.name = 'InvalidTokenStandard';
        this.code = 0x1788; // 6024
    }
}
exports.CmInvalidTokenStandardError = CmInvalidTokenStandardError;
codeToErrorMap.set(0x1788, CmInvalidTokenStandardError);
nameToErrorMap.set('InvalidTokenStandard', CmInvalidTokenStandardError);
/** MissingTokenAccount: Missing token account */
class CmMissingTokenAccountError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Missing token account', program, cause);
        this.name = 'MissingTokenAccount';
        this.code = 0x1789; // 6025
    }
}
exports.CmMissingTokenAccountError = CmMissingTokenAccountError;
codeToErrorMap.set(0x1789, CmMissingTokenAccountError);
nameToErrorMap.set('MissingTokenAccount', CmMissingTokenAccountError);
/** MissingTokenRecord: Missing token record */
class CmMissingTokenRecordError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Missing token record', program, cause);
        this.name = 'MissingTokenRecord';
        this.code = 0x178a; // 6026
    }
}
exports.CmMissingTokenRecordError = CmMissingTokenRecordError;
codeToErrorMap.set(0x178a, CmMissingTokenRecordError);
nameToErrorMap.set('MissingTokenRecord', CmMissingTokenRecordError);
/** MissingInstructionsSysvar: Missing instructions sysvar account */
class CmMissingInstructionsSysvarError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Missing instructions sysvar account', program, cause);
        this.name = 'MissingInstructionsSysvar';
        this.code = 0x178b; // 6027
    }
}
exports.CmMissingInstructionsSysvarError = CmMissingInstructionsSysvarError;
codeToErrorMap.set(0x178b, CmMissingInstructionsSysvarError);
nameToErrorMap.set('MissingInstructionsSysvar', CmMissingInstructionsSysvarError);
/** MissingSplAtaProgram: Missing SPL ATA program */
class CmMissingSplAtaProgramError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Missing SPL ATA program', program, cause);
        this.name = 'MissingSplAtaProgram';
        this.code = 0x178c; // 6028
    }
}
exports.CmMissingSplAtaProgramError = CmMissingSplAtaProgramError;
codeToErrorMap.set(0x178c, CmMissingSplAtaProgramError);
nameToErrorMap.set('MissingSplAtaProgram', CmMissingSplAtaProgramError);
/** InvalidAccountVersion: Invalid account version */
class CmInvalidAccountVersionError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid account version', program, cause);
        this.name = 'InvalidAccountVersion';
        this.code = 0x178d; // 6029
    }
}
exports.CmInvalidAccountVersionError = CmInvalidAccountVersionError;
codeToErrorMap.set(0x178d, CmInvalidAccountVersionError);
nameToErrorMap.set('InvalidAccountVersion', CmInvalidAccountVersionError);
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
function getMplCandyMachineCoreErrorFromCode(code, program, cause) {
    const constructor = codeToErrorMap.get(code);
    return constructor ? new constructor(program, cause) : null;
}
exports.getMplCandyMachineCoreErrorFromCode = getMplCandyMachineCoreErrorFromCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
function getMplCandyMachineCoreErrorFromName(name, program, cause) {
    const constructor = nameToErrorMap.get(name);
    return constructor ? new constructor(program, cause) : null;
}
exports.getMplCandyMachineCoreErrorFromName = getMplCandyMachineCoreErrorFromName;
//# sourceMappingURL=mplCandyMachineCore.js.map