"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeFetchCandyGuardFromSeeds = exports.fetchCandyGuardFromSeeds = exports.findCandyGuardPda = exports.getCandyGuardSize = exports.getCandyGuardGpaBuilder = exports.safeFetchAllCandyGuard = exports.fetchAllCandyGuard = exports.safeFetchCandyGuard = exports.fetchCandyGuard = exports.deserializeCandyGuard = exports.getCandyGuardAccountDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
function getCandyGuardAccountDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['base', (0, serializers_1.publicKey)()],
        ['bump', (0, serializers_1.u8)()],
        ['authority', (0, serializers_1.publicKey)()],
    ], { description: 'CandyGuardAccountData' }), (value) => ({
        ...value,
        discriminator: [44, 207, 199, 184, 112, 103, 34, 181],
    }));
}
exports.getCandyGuardAccountDataSerializer = getCandyGuardAccountDataSerializer;
function deserializeCandyGuard(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getCandyGuardAccountDataSerializer());
}
exports.deserializeCandyGuard = deserializeCandyGuard;
async function fetchCandyGuard(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'CandyGuard');
    return deserializeCandyGuard(maybeAccount);
}
exports.fetchCandyGuard = fetchCandyGuard;
async function safeFetchCandyGuard(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeCandyGuard(maybeAccount) : null;
}
exports.safeFetchCandyGuard = safeFetchCandyGuard;
async function fetchAllCandyGuard(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'CandyGuard');
        return deserializeCandyGuard(maybeAccount);
    });
}
exports.fetchAllCandyGuard = fetchAllCandyGuard;
async function safeFetchAllCandyGuard(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeCandyGuard(maybeAccount));
}
exports.safeFetchAllCandyGuard = safeFetchAllCandyGuard;
function getCandyGuardGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplCandyGuard', 'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        base: [8, (0, serializers_1.publicKey)()],
        bump: [40, (0, serializers_1.u8)()],
        authority: [41, (0, serializers_1.publicKey)()],
    })
        .deserializeUsing((account) => deserializeCandyGuard(account))
        .whereField('discriminator', [44, 207, 199, 184, 112, 103, 34, 181]);
}
exports.getCandyGuardGpaBuilder = getCandyGuardGpaBuilder;
function getCandyGuardSize() {
    return 73;
}
exports.getCandyGuardSize = getCandyGuardSize;
function findCandyGuardPda(context, seeds) {
    const programId = context.programs.getPublicKey('mplCandyGuard', 'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g');
    return context.eddsa.findPda(programId, [
        (0, serializers_1.string)({ size: 'variable' }).serialize('candy_guard'),
        (0, serializers_1.publicKey)().serialize(seeds.base),
    ]);
}
exports.findCandyGuardPda = findCandyGuardPda;
async function fetchCandyGuardFromSeeds(context, seeds, options) {
    return fetchCandyGuard(context, findCandyGuardPda(context, seeds), options);
}
exports.fetchCandyGuardFromSeeds = fetchCandyGuardFromSeeds;
async function safeFetchCandyGuardFromSeeds(context, seeds, options) {
    return safeFetchCandyGuard(context, findCandyGuardPda(context, seeds), options);
}
exports.safeFetchCandyGuardFromSeeds = safeFetchCandyGuardFromSeeds;
//# sourceMappingURL=candyGuard.js.map