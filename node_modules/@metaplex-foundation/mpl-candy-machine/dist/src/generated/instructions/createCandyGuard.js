"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCandyGuard = exports.getCreateCandyGuardInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const hooked_1 = require("../../hooked");
const shared_1 = require("../shared");
function getCreateCandyGuardInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['data', (0, serializers_1.bytes)({ size: (0, serializers_1.u32)() })],
    ], { description: 'CreateCandyGuardInstructionData' }), (value) => ({
        ...value,
        discriminator: [175, 175, 109, 31, 13, 152, 155, 237],
    }));
}
exports.getCreateCandyGuardInstructionDataSerializer = getCreateCandyGuardInstructionDataSerializer;
// Instruction.
function createCandyGuard(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplCandyGuard', 'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g');
    // Accounts.
    const resolvedAccounts = {
        candyGuard: { index: 0, isWritable: true, value: input.candyGuard ?? null },
        base: { index: 1, isWritable: false, value: input.base ?? null },
        authority: { index: 2, isWritable: false, value: input.authority ?? null },
        payer: { index: 3, isWritable: true, value: input.payer ?? null },
        systemProgram: {
            index: 4,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.candyGuard.value) {
        resolvedAccounts.candyGuard.value = (0, hooked_1.findCandyGuardPda)(context, {
            base: (0, shared_1.expectPublicKey)(resolvedAccounts.base.value),
        });
    }
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity.publicKey;
    }
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getCreateCandyGuardInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.createCandyGuard = createCandyGuard;
//# sourceMappingURL=createCandyGuard.js.map