"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeFetchFreezeEscrowFromSeeds = exports.fetchFreezeEscrowFromSeeds = exports.findFreezeEscrowPda = exports.getFreezeEscrowGpaBuilder = exports.safeFetchAllFreezeEscrow = exports.fetchAllFreezeEscrow = exports.safeFetchFreezeEscrow = exports.fetchFreezeEscrow = exports.deserializeFreezeEscrow = exports.getFreezeEscrowAccountDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
function getFreezeEscrowAccountDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['candyGuard', (0, serializers_1.publicKey)()],
        ['candyMachine', (0, serializers_1.publicKey)()],
        ['frozenCount', (0, serializers_1.u64)()],
        ['firstMintTime', (0, serializers_1.option)((0, serializers_1.i64)())],
        ['freezePeriod', (0, serializers_1.i64)()],
        ['destination', (0, serializers_1.publicKey)()],
        ['authority', (0, serializers_1.publicKey)()],
    ], { description: 'FreezeEscrowAccountData' }), (value) => ({
        ...value,
        discriminator: [227, 186, 40, 152, 7, 174, 131, 184],
    }));
}
exports.getFreezeEscrowAccountDataSerializer = getFreezeEscrowAccountDataSerializer;
function deserializeFreezeEscrow(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getFreezeEscrowAccountDataSerializer());
}
exports.deserializeFreezeEscrow = deserializeFreezeEscrow;
async function fetchFreezeEscrow(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'FreezeEscrow');
    return deserializeFreezeEscrow(maybeAccount);
}
exports.fetchFreezeEscrow = fetchFreezeEscrow;
async function safeFetchFreezeEscrow(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeFreezeEscrow(maybeAccount) : null;
}
exports.safeFetchFreezeEscrow = safeFetchFreezeEscrow;
async function fetchAllFreezeEscrow(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'FreezeEscrow');
        return deserializeFreezeEscrow(maybeAccount);
    });
}
exports.fetchAllFreezeEscrow = fetchAllFreezeEscrow;
async function safeFetchAllFreezeEscrow(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeFreezeEscrow(maybeAccount));
}
exports.safeFetchAllFreezeEscrow = safeFetchAllFreezeEscrow;
function getFreezeEscrowGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplCandyGuard', 'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        candyGuard: [8, (0, serializers_1.publicKey)()],
        candyMachine: [40, (0, serializers_1.publicKey)()],
        frozenCount: [72, (0, serializers_1.u64)()],
        firstMintTime: [80, (0, serializers_1.option)((0, serializers_1.i64)())],
        freezePeriod: [null, (0, serializers_1.i64)()],
        destination: [null, (0, serializers_1.publicKey)()],
        authority: [null, (0, serializers_1.publicKey)()],
    })
        .deserializeUsing((account) => deserializeFreezeEscrow(account))
        .whereField('discriminator', [227, 186, 40, 152, 7, 174, 131, 184]);
}
exports.getFreezeEscrowGpaBuilder = getFreezeEscrowGpaBuilder;
function findFreezeEscrowPda(context, seeds) {
    const programId = context.programs.getPublicKey('mplCandyGuard', 'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g');
    return context.eddsa.findPda(programId, [
        (0, serializers_1.string)({ size: 'variable' }).serialize('freeze_escrow'),
        (0, serializers_1.publicKey)().serialize(seeds.destination),
        (0, serializers_1.publicKey)().serialize(seeds.candyGuard),
        (0, serializers_1.publicKey)().serialize(seeds.candyMachine),
    ]);
}
exports.findFreezeEscrowPda = findFreezeEscrowPda;
async function fetchFreezeEscrowFromSeeds(context, seeds, options) {
    return fetchFreezeEscrow(context, findFreezeEscrowPda(context, seeds), options);
}
exports.fetchFreezeEscrowFromSeeds = fetchFreezeEscrowFromSeeds;
async function safeFetchFreezeEscrowFromSeeds(context, seeds, options) {
    return safeFetchFreezeEscrow(context, findFreezeEscrowPda(context, seeds), options);
}
exports.safeFetchFreezeEscrowFromSeeds = safeFetchFreezeEscrowFromSeeds;
//# sourceMappingURL=freezeEscrow.js.map