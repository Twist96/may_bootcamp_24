"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.setCandyMachineAuthority = exports.getSetCandyMachineAuthorityInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getSetCandyMachineAuthorityInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['newAuthority', (0, serializers_1.publicKey)()],
    ], { description: 'SetCandyMachineAuthorityInstructionData' }), (value) => ({
        ...value,
        discriminator: [133, 250, 37, 21, 110, 163, 26, 121],
    }));
}
exports.getSetCandyMachineAuthorityInstructionDataSerializer = getSetCandyMachineAuthorityInstructionDataSerializer;
// Instruction.
function setCandyMachineAuthority(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplCandyMachineCore', 'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR');
    // Accounts.
    const resolvedAccounts = {
        candyMachine: {
            index: 0,
            isWritable: true,
            value: input.candyMachine ?? null,
        },
        authority: { index: 1, isWritable: false, value: input.authority ?? null },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getSetCandyMachineAuthorityInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.setCandyMachineAuthority = setCandyMachineAuthority;
//# sourceMappingURL=setCandyMachineAuthority.js.map