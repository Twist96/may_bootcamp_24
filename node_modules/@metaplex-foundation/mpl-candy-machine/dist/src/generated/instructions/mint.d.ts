/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Option, OptionOrNullable, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export declare type MintInstructionAccounts = {
    candyGuard?: PublicKey | Pda;
    candyMachineProgram?: PublicKey | Pda;
    candyMachine: PublicKey | Pda;
    candyMachineAuthorityPda?: PublicKey | Pda;
    payer?: Signer;
    nftMetadata?: PublicKey | Pda;
    nftMint: PublicKey | Pda;
    nftMintAuthority?: Signer;
    nftMasterEdition?: PublicKey | Pda;
    collectionAuthorityRecord?: PublicKey | Pda;
    collectionMint: PublicKey | Pda;
    collectionMetadata?: PublicKey | Pda;
    collectionMasterEdition?: PublicKey | Pda;
    collectionUpdateAuthority: PublicKey | Pda;
    tokenMetadataProgram?: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
    recentSlothashes?: PublicKey | Pda;
    instructionSysvarAccount?: PublicKey | Pda;
};
export declare type MintInstructionData = {
    discriminator: Array<number>;
    mintArgs: Uint8Array;
    group: Option<string>;
};
export declare type MintInstructionDataArgs = {
    mintArgs: Uint8Array;
    group: OptionOrNullable<string>;
};
export declare function getMintInstructionDataSerializer(): Serializer<MintInstructionDataArgs, MintInstructionData>;
export declare type MintInstructionArgs = MintInstructionDataArgs;
export declare function mint(context: Pick<Context, 'eddsa' | 'identity' | 'payer' | 'programs'>, input: MintInstructionAccounts & MintInstructionArgs): TransactionBuilder;
