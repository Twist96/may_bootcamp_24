"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLutAddressesForCandyMachine = exports.createLutForCandyMachine = void 0;
const mpl_token_metadata_1 = require("@metaplex-foundation/mpl-token-metadata");
const mpl_toolbox_1 = require("@metaplex-foundation/mpl-toolbox");
const umi_1 = require("@metaplex-foundation/umi");
const generated_1 = require("./generated");
const hooked_1 = require("./hooked");
const createLutForCandyMachine = async (context, recentSlot, candyMachine, collectionUpdateAuthority, lutAuthority) => {
    const addresses = await (0, exports.getLutAddressesForCandyMachine)(context, candyMachine, collectionUpdateAuthority);
    return (0, mpl_toolbox_1.createLut)(context, {
        recentSlot,
        addresses,
        authority: lutAuthority,
    });
};
exports.createLutForCandyMachine = createLutForCandyMachine;
const getLutAddressesForCandyMachine = async (context, candyMachine, collectionUpdateAuthority) => {
    const candyMachineAccount = await (0, generated_1.fetchCandyMachine)(context, candyMachine);
    const { mintAuthority, collectionMint } = candyMachineAccount;
    collectionUpdateAuthority ?? (collectionUpdateAuthority = context.identity.publicKey);
    const [collectionAuthorityPda] = (0, hooked_1.findCandyMachineAuthorityPda)(context, {
        candyMachine,
    });
    const [delegateRecordV1] = (0, mpl_token_metadata_1.findCollectionAuthorityRecordPda)(context, {
        mint: collectionMint,
        collectionAuthority: collectionAuthorityPda,
    });
    const [delegateRecordV2] = (0, mpl_token_metadata_1.findMetadataDelegateRecordPda)(context, {
        mint: collectionMint,
        delegateRole: mpl_token_metadata_1.MetadataDelegateRole.Collection,
        updateAuthority: collectionUpdateAuthority,
        delegate: collectionAuthorityPda,
    });
    return (0, umi_1.uniquePublicKeys)([
        candyMachine,
        mintAuthority,
        collectionMint,
        (0, mpl_token_metadata_1.findMetadataPda)(context, { mint: collectionMint })[0],
        (0, mpl_token_metadata_1.findMasterEditionPda)(context, { mint: collectionMint })[0],
        collectionUpdateAuthority,
        (0, hooked_1.findCandyMachineAuthorityPda)(context, { candyMachine })[0],
        candyMachineAccount.version === generated_1.AccountVersion.V1
            ? delegateRecordV1
            : delegateRecordV2,
        (0, mpl_toolbox_1.getSysvar)('instructions'),
        (0, mpl_toolbox_1.getSysvar)('slotHashes'),
        (0, mpl_toolbox_1.getSplTokenProgramId)(context),
        (0, mpl_toolbox_1.getSplAssociatedTokenProgramId)(context),
        (0, mpl_token_metadata_1.getMplTokenMetadataProgramId)(context),
        (0, generated_1.getMplCandyMachineCoreProgramId)(context),
    ]);
};
exports.getLutAddressesForCandyMachine = getLutAddressesForCandyMachine;
//# sourceMappingURL=createLutForCandyMachine.js.map