/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
/** PDA to track whether an address has been validated or not. */
export declare type AllowListProof = Account<AllowListProofAccountData>;
export declare type AllowListProofAccountData = {
    timestamp: bigint;
};
export declare type AllowListProofAccountDataArgs = {
    timestamp: number | bigint;
};
export declare function getAllowListProofAccountDataSerializer(): Serializer<AllowListProofAccountDataArgs, AllowListProofAccountData>;
export declare function deserializeAllowListProof(rawAccount: RpcAccount): AllowListProof;
export declare function fetchAllowListProof(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<AllowListProof>;
export declare function safeFetchAllowListProof(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<AllowListProof | null>;
export declare function fetchAllAllowListProof(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<AllowListProof[]>;
export declare function safeFetchAllAllowListProof(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<AllowListProof[]>;
export declare function getAllowListProofGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<AllowListProof, {
    timestamp: number | bigint;
}>;
export declare function getAllowListProofSize(): number;
export declare function findAllowListProofPda(context: Pick<Context, 'eddsa' | 'programs'>, seeds: {
    /** The Merkle Root used when verifying the user */
    merkleRoot: Uint8Array;
    /** The address of the wallet trying to mint */
    user: PublicKey;
    /** The address of the Candy Guard account */
    candyGuard: PublicKey;
    /** The address of the Candy Machine account */
    candyMachine: PublicKey;
}): Pda;
export declare function fetchAllowListProofFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findAllowListProofPda>[1], options?: RpcGetAccountOptions): Promise<AllowListProof>;
export declare function safeFetchAllowListProofFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findAllowListProofPda>[1], options?: RpcGetAccountOptions): Promise<AllowListProof | null>;
