import { Program } from '@metaplex-foundation/umi';
import { GuardManifest } from './guardManifest';
export declare type AnyGuardManifest = GuardManifest<any, any, any, any>;
export declare type CandyGuardProgram = Program & {
    availableGuards: string[];
};
export interface GuardRepository {
    /** Registers one or many guards by providing their manifest. */
    add(...manifests: AnyGuardManifest[]): void;
    /** Gets the manifest of a guard using its name. */
    get<T extends AnyGuardManifest = AnyGuardManifest>(name: string): T;
    /** Gets all registered guard manifests. */
    all(): AnyGuardManifest[];
    /**
     * Gets all guard manifests for a registered Candy Guard program.
     *
     * It fails if the manifest of any guard expected by the program
     * is not registered. Manifests are returned in the order in which
     * they are defined on the `availableGuards` property of the program.
     */
    forProgram(program: CandyGuardProgram): AnyGuardManifest[];
}
export declare class DefaultGuardRepository implements GuardRepository {
    protected readonly manifests: Map<string, AnyGuardManifest>;
    add(...manifests: AnyGuardManifest[]): void;
    get<T extends AnyGuardManifest = AnyGuardManifest>(name: string): T;
    all(): AnyGuardManifest[];
    forProgram(program: CandyGuardProgram): AnyGuardManifest[];
}
