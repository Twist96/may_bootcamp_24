/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
/** PDA to track the number of mints. */
export declare type AllocationTracker = Account<AllocationTrackerAccountData>;
export declare type AllocationTrackerAccountData = {
    count: number;
};
export declare type AllocationTrackerAccountDataArgs = AllocationTrackerAccountData;
export declare function getAllocationTrackerAccountDataSerializer(): Serializer<AllocationTrackerAccountDataArgs, AllocationTrackerAccountData>;
export declare function deserializeAllocationTracker(rawAccount: RpcAccount): AllocationTracker;
export declare function fetchAllocationTracker(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<AllocationTracker>;
export declare function safeFetchAllocationTracker(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<AllocationTracker | null>;
export declare function fetchAllAllocationTracker(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<AllocationTracker[]>;
export declare function safeFetchAllAllocationTracker(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<AllocationTracker[]>;
export declare function getAllocationTrackerGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<AllocationTracker, {
    count: number;
}>;
export declare function getAllocationTrackerSize(): number;
export declare function findAllocationTrackerPda(context: Pick<Context, 'eddsa' | 'programs'>, seeds: {
    /** Unique identifier of the allocation */
    id: number;
    /** The address of the Candy Guard account */
    candyGuard: PublicKey;
    /** The address of the Candy Machine account */
    candyMachine: PublicKey;
}): Pda;
export declare function fetchAllocationTrackerFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findAllocationTrackerPda>[1], options?: RpcGetAccountOptions): Promise<AllocationTracker>;
export declare function safeFetchAllocationTrackerFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findAllocationTrackerPda>[1], options?: RpcGetAccountOptions): Promise<AllocationTracker | null>;
