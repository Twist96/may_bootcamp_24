"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCandyMachineSize = void 0;
const mpl_token_metadata_1 = require("@metaplex-foundation/mpl-token-metadata");
const umi_1 = require("@metaplex-foundation/umi");
const constants_1 = require("../constants");
function getCandyMachineSize(itemsAvailable, configLineSettings, tokenStandard = mpl_token_metadata_1.TokenStandard.NonFungible) {
    configLineSettings = (0, umi_1.isOption)(configLineSettings)
        ? configLineSettings
        : (0, umi_1.wrapNullable)(configLineSettings);
    const base = (0, mpl_token_metadata_1.isProgrammable)(tokenStandard)
        ? constants_1.CANDY_MACHINE_HIDDEN_SECTION + 33
        : constants_1.CANDY_MACHINE_HIDDEN_SECTION;
    if ((0, umi_1.isNone)(configLineSettings)) {
        return base;
    }
    const items = Number(itemsAvailable);
    const configLineSize = configLineSettings.value.nameLength + configLineSettings.value.uriLength;
    return Math.ceil(base +
        // Number of currently items inserted.
        4 +
        // Config line data.
        items * configLineSize +
        // Bit mask to keep track of which ConfigLines have been added.
        (4 + Math.floor(items / 8) + 1) +
        // Mint indices.
        (4 + items * 4));
}
exports.getCandyMachineSize = getCandyMachineSize;
//# sourceMappingURL=candyMachine.js.map